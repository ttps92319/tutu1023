<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>子母畫面Picture in picture</title>
      <link href="/tutu1023/2021/09/16/%E5%AD%90%E6%AF%8D%E7%95%AB%E9%9D%A2Picture%20in%20picture/"/>
      <url>/tutu1023/2021/09/16/%E5%AD%90%E6%AF%8D%E7%95%AB%E9%9D%A2Picture%20in%20picture/</url>
      
        <content type="html"><![CDATA[<p>  Create：2021/05/11<br>  Update：2021/09/16<br>  By：Ada<br>  Code：Kotlin</p><p>資料來源：<br><span class="exturl"><a class="exturl__link"   href="https://developer.android.com/guide/topics/ui/picture-in-picture" >https://developer.android.com/guide/topics/ui/picture-in-picture</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><video autoplay controls width="350" loop>    <source type="video/mp4" src="https://developer.android.com/images/pip.mp4"></source></video><p><span class="exturl"><a class="exturl__link"   href="https://developer.android.com/images/pip.mp4" >https://developer.android.com/images/pip.mp4</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><hr>        <h2 id="子母畫面"   >          <a href="#子母畫面" class="heading-link"><i class="fas fa-link"></i></a><a href="#子母畫面" class="headerlink" title="子母畫面"></a>子母畫面</h2>      <p><img src="https://i.imgur.com/yQjTBDx.jpg" alt="Imgur"></p><p>Android 8.0（API 級別26）允許以畫中畫(PIP)模式啟動Activity。畫中畫是一種特殊類型的多窗口模式，最常用於視頻播放。使用該模式時，用戶可以通過固定到屏幕一角的小窗口觀看視頻，同時在應用之間進行導航或瀏覽主屏幕上的內容。</p><p>如要將畫中畫添加到您的應用中，您需要註冊支持畫中畫的Activity，根據需要將Activity 切換為畫中畫模式，並確保當Activity 處於畫中畫模式時，界面元素處於隱藏狀態且視頻能夠繼續播放。</p><p>畫中畫窗口會顯示在屏幕的最上層，位於系統選擇的一角。您可以將畫中畫窗口拖動到其他位置。當您點按該窗口時，會看到兩個特殊的控件：全屏切換開關（位於窗口的中心）和關閉按鈕（右上角的“X”）。</p>        <h4 id="聲明對畫中畫的支持"   >          <a href="#聲明對畫中畫的支持" class="heading-link"><i class="fas fa-link"></i></a><a href="#聲明對畫中畫的支持" class="headerlink" title="聲明對畫中畫的支持"></a>聲明對畫中畫的支持</h4>      <figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;activity</span><br><span class="line">    android:name=&quot;.PlayerActivity&quot;</span><br><span class="line">    android:configChanges=&quot;screenSize|smallestScreenSize|screenLayout|orientation|uiMode&quot;</span><br><span class="line">    android:launchMode=&quot;singleTask&quot;</span><br><span class="line">    android:supportsPictureInPicture=&quot;true&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span>       </span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="將您的Activity-切換到畫中畫模式"   >          <a href="#將您的Activity-切換到畫中畫模式" class="heading-link"><i class="fas fa-link"></i></a><a href="#將您的Activity-切換到畫中畫模式" class="headerlink" title="將您的Activity 切換到畫中畫模式"></a>將您的Activity 切換到畫中畫模式</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N</span><br><span class="line">    &amp;&amp; packageManager.hasSystemFeature(PackageManager.FEATURE_PICTURE_IN_PICTURE))  <span class="comment">//確保設備等級、內存夠用</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) </span><br><span class="line">        enterPictureInPictureMode(PictureInPictureParams.Builder().build())</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        enterPictureInPictureMode()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="處理畫中畫模式下的界面元素"   >          <a href="#處理畫中畫模式下的界面元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#處理畫中畫模式下的界面元素" class="headerlink" title="處理畫中畫模式下的界面元素"></a>處理畫中畫模式下的界面元素</h3>      <ul><li>加入自定義控件：setActions(actions: RemoteAction)</li><li>設定畫面比例（非畫面大小）：setAspectRatio(aspectRatio: Rational)</li></ul><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> actions = arrayListOf&lt;RemoteAction&gt;()</span><br><span class="line"><span class="keyword">val</span> remoteAction = RemoteAction(</span><br><span class="line">    Icon.createWithResource(<span class="keyword">this</span><span class="symbol">@PlayerActivity</span>, R.drawable.control_1), <span class="string">&quot;title&quot;</span>, <span class="string">&quot;contentDescription&quot;</span>,</span><br><span class="line">    PendingIntent.getBroadcast(<span class="keyword">this</span><span class="symbol">@PlayerActivity</span>, <span class="number">0</span>, Intent(<span class="string">&quot;MY_PIP_ACTION&quot;</span>), <span class="number">0</span>))</span><br><span class="line">actions.add(remoteAction)</span><br><span class="line"></span><br><span class="line">setPictureInPictureParams(PictureInPictureParams.Builder().setActions(actions).build())</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>P.S. 只要加上自定義控件的程式碼，Google Pixel設備就會有子母畫面特別大或無法控制的bug，不知是不是少設定了什麼東西導致的。</p>        <h3 id="onPictureInPictureModeChanged"   >          <a href="#onPictureInPictureModeChanged" class="heading-link"><i class="fas fa-link"></i></a><a href="#onPictureInPictureModeChanged" class="headerlink" title="onPictureInPictureModeChanged"></a>onPictureInPictureModeChanged</h3>      <p>利用onPictureInPictureModeChanged方法去顯示/隱藏controller</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPictureInPictureModeChanged</span><span class="params">(isInPictureInPictureMode: <span class="type">Boolean</span>, newConfig: <span class="type">Configuration</span>?)</span></span> &#123;</span><br><span class="line">    simpleExoPlayerView?.useController = !isInPictureInPictureMode</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="測試結果"   >          <a href="#測試結果" class="heading-link"><i class="fas fa-link"></i></a><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h3>      <video controls width="350">  <source type="video/mp4" src="https://i.imgur.com/fHu9vHb.mp4"></source></video><p><span class="exturl"><a class="exturl__link"   href="https://i.imgur.com/fHu9vHb.mp4" >https://i.imgur.com/fHu9vHb.mp4</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="發現問題"   >          <a href="#發現問題" class="heading-link"><i class="fas fa-link"></i></a><a href="#發現問題" class="headerlink" title="發現問題"></a>發現問題</h2>      <p>看過測試結果之後，再觀察YouTube Premium 依照使用者習慣/喜好以及PIP模式所規劃的一系列使用流程，點出幾個皮克這邊不順暢的地方。</p><p>首先先來看看YouTube Premium 以及 Chrome 對於子母畫面的使用流程</p><p>👇🏻 YouTube Premium</p><p>影片按住下拉➡️內部子母畫面➡️按下home鍵➡️進入子母畫面</p><p><img src="https://i.imgur.com/c43q0k4.png" alt="Imgur"></p><p>👇🏻 Chrome瀏覽器</p><p>影片在全螢幕的狀態下按home鍵才會變成子母畫面</p><video controls width="350">  <source type="video/mp4" src="https://imgur.com/6jYHXBW.mp4"></source></video><p><span class="exturl"><a class="exturl__link"   href="https://imgur.com/6jYHXBW.mp4" >https://imgur.com/6jYHXBW.mp4</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><video controls width="350">  <source type="video/mp4" src="https://i.imgur.com/fHu9vHb.mp4"></source></video><p><span class="exturl"><a class="exturl__link"   href="https://i.imgur.com/fHu9vHb.mp4" >https://i.imgur.com/fHu9vHb.mp4</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>相比Chrome瀏覽器，在皮克這邊，我們發現播放頁和原本APP會被獨立切開來。在子母畫面/播放頁中不管怎麼操作都回不了App列表頁，只能透過背景執行程式回去。</p><p>而點擊Chrome的子母畫面後，子母畫面會展開回到全螢幕模式，按下返回鍵時是退出全螢幕回到網頁模式，而非再次變成子母畫面。</p>        <h2 id="觀察與比較Chrome、YouTube-Premium的做法"   >          <a href="#觀察與比較Chrome、YouTube-Premium的做法" class="heading-link"><i class="fas fa-link"></i></a><a href="#觀察與比較Chrome、YouTube-Premium的做法" class="headerlink" title="觀察與比較Chrome、YouTube Premium的做法"></a>觀察與比較Chrome、YouTube Premium的做法</h2>      <p>列出幾點相異的部分，並試著分析Google產品使用子母畫面時所應用的系統架構。</p>        <h3 id="最近使用的應用程式-00-21-vs-00-20"   >          <a href="#最近使用的應用程式-00-21-vs-00-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#最近使用的應用程式-00-21-vs-00-20" class="headerlink" title="最近使用的應用程式 00:21 vs. 00:20"></a>最近使用的應用程式 00:21 vs. 00:20</h3>      <p>開啟子母畫面後，Google應用程式在背景執行程式是找不到的，但皮克仍然能在背景執行程式中看到。</p>        <h3 id="再次縮小時沒有返回app-00-28-vs-YouTube-Premium"   >          <a href="#再次縮小時沒有返回app-00-28-vs-YouTube-Premium" class="heading-link"><i class="fas fa-link"></i></a><a href="#再次縮小時沒有返回app-00-28-vs-YouTube-Premium" class="headerlink" title="再次縮小時沒有返回app 00:28 vs. YouTube Premium"></a>再次縮小時沒有返回app 00:28 vs. YouTube Premium</h3>      <p>當在桌面/其他應用程式中點擊子母畫面時，子母畫面會擴展成原先的播放頁。YouTube可以選擇再次將影片下拉成小播放控制器，或直接按下home鍵回到桌面並生成子母畫面，但皮克從子母畫面回來之後，按返回鍵縮回子母畫面後卻是回到桌面。</p>        <h3 id="分析原因"   >          <a href="#分析原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3>      <p>其實早先為了另外一個問題在爬文的時候，有看過 stackflow 討論串說明 YouTube 將所有東西寫在一起。並且PIP模式的標準行為，便是回桌面後點開子母畫面，再返回會仍然會回到桌面。</p><p>綜合以上幾點，我推論出 Android 端的子母畫面，是將整個 Activity 活動頁給包裝進子母畫面的框架中，有別於 iOS 是將播放器畫面嫁接給系統的懸浮播放器。 iOS 在使用子母畫面時，原先播放頁會顯示：「此影片正在以子母畫面播放」，但安卓端會將整個播放頁吃進子母畫面。會發現吃進整個播放頁，是因為前期在測試子母畫面時，誤打誤撞在子母畫面裡看見播放頁下方的聊天室。</p><p>若是將 <code>android:supportsPictureInPicture=&quot;true&quot;</code> 寫在 Application 的聲明中是不起作用的。所以在只有一個 Activity 能夠被裝到子母畫面的情況下，表示 這些應用程式的整體架構只有一個Activity來處理多個畫面。</p><p><img src="https://i.imgur.com/NFKhBkA.png" alt="Imgur"></p><p><img src="https://i.imgur.com/3axAfm3.jpg" alt="Imgur"></p>        <h2 id="解決辦法"   >          <a href="#解決辦法" class="heading-link"><i class="fas fa-link"></i></a><a href="#解決辦法" class="headerlink" title="解決辦法"></a>解決辦法</h2>              <h3 id="❌-1-再寫一個新的Activity專門處理Picture-in-picture畫面"   >          <a href="#❌-1-再寫一個新的Activity專門處理Picture-in-picture畫面" class="heading-link"><i class="fas fa-link"></i></a><a href="#❌-1-再寫一個新的Activity專門處理Picture-in-picture畫面" class="headerlink" title="❌ 1. 再寫一個新的Activity專門處理Picture in picture畫面"></a>❌ 1. 再寫一個新的Activity專門處理Picture in picture畫面</h3>      <p>資料傳遞到新的Activity後把舊player給他Finish掉（或藏起來），直接進入子母畫面模式。但重複作影片loading的動作，且將子母畫面點開之後，還要再把原本包含聊天室等功能的Player呼叫或新增回來。</p>        <h3 id="❌-2-更改架構，將Player從Activity變更為Fragment，包含其他Activity如Search、Login"   >          <a href="#❌-2-更改架構，將Player從Activity變更為Fragment，包含其他Activity如Search、Login" class="heading-link"><i class="fas fa-link"></i></a><a href="#❌-2-更改架構，將Player從Activity變更為Fragment，包含其他Activity如Search、Login" class="headerlink" title="❌ 2. 更改架構，將Player從Activity變更為Fragment，包含其他Activity如Search、Login"></a>❌ 2. 更改架構，將Player從Activity變更為Fragment，包含其他Activity如Search、Login</h3>      <p>效仿YouTube模式，將所有畫面建置在一個Activity的架構上，但考慮到要改的話需要動到一堆頁面，且有許多功能是仰仗身為Activity而非Fragment的Player，所以遲遲不敢動工。</p>        <h3 id="❌-3-在返回鍵的function中，強制將上一個頁面挖回來"   >          <a href="#❌-3-在返回鍵的function中，強制將上一個頁面挖回來" class="heading-link"><i class="fas fa-link"></i></a><a href="#❌-3-在返回鍵的function中，強制將上一個頁面挖回來" class="headerlink" title="❌ 3. 在返回鍵的function中，強制將上一個頁面挖回來"></a>❌ 3. 在返回鍵的function中，強制將上一個頁面挖回來</h3>      <p>如：從MainActivity來就Intent回去。但MainActivity/SearchActivity/CategoryActivity都跟Player有直接關係，需要每次進來Player時都帶一個寄件人住址，所以這個方法也不好。</p>        <h3 id="⭕️-4-在返回鍵的function中，強制將App整疊抱回來"   >          <a href="#⭕️-4-在返回鍵的function中，強制將App整疊抱回來" class="heading-link"><i class="fas fa-link"></i></a><a href="#⭕️-4-在返回鍵的function中，強制將App整疊抱回來" class="headerlink" title="⭕️ 4. 在返回鍵的function中，強制將App整疊抱回來"></a>⭕️ 4. 在返回鍵的function中，強制將App整疊抱回來</h3>      <p>這是後來在寫推播通知點擊事件的時候，陰錯陽差想到可以利用同樣的方法，在返回鍵的function中，直接把App call回來。而App整疊的最上面，就是之前使用的最後一個畫面。</p><p>在觸發事件之後先啟動App的第一個頁面（LauncherActivity啟動畫面），這時Launcher會先判斷Launcher本人是不是整個App唯一一個Activity。如果是的話，就繼續做該做的事，如：loading、get API…。如果不是的話，就把自己Finish掉，Show出堆疊在Launcher下面的那位同胞。</p><p><img src="https://i.imgur.com/QUOydKm.png" alt="啟動模式.png"></p>        <h6 id="tags-應用技術-Picture-In-Picture-PIP-子母畫面"   >          <a href="#tags-應用技術-Picture-In-Picture-PIP-子母畫面" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-Picture-In-Picture-PIP-子母畫面" class="headerlink" title="tags: 應用技術 Picture In Picture PIP 子母畫面"></a>tags: <code>應用技術</code> <code>Picture In Picture</code> <code>PIP</code> <code>子母畫面</code></h6>      ]]></content>
      
      
      <categories>
          
          <category> 應用技術, 123 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 應用技術, Picture In Picture, PIP, 子母畫面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>場景轉換動畫SceneTransitionAnimation-圖對圖</title>
      <link href="/tutu1023/2021/09/16/%E5%A0%B4%E6%99%AF%E8%BD%89%E6%8F%9B%E5%8B%95%E7%95%ABSceneTransitionAnimation-%E5%9C%96%E5%B0%8D%E5%9C%96/"/>
      <url>/tutu1023/2021/09/16/%E5%A0%B4%E6%99%AF%E8%BD%89%E6%8F%9B%E5%8B%95%E7%95%ABSceneTransitionAnimation-%E5%9C%96%E5%B0%8D%E5%9C%96/</url>
      
        <content type="html"><![CDATA[<p>  Create：2021/08/30<br>  Update：2021/08/31<br>  By：Ada<br>  Code：Kotlin</p><p>參考來源：<br><span class="exturl"><a class="exturl__link"   href="https://www.youtube.com/watch?v=DkSlk03-opA" >https://www.youtube.com/watch?v=DkSlk03-opA</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>附加於startActivity的圖對圖活動轉場動畫。</p><iframe src="https://www.youtube.com/embed?video_id=DkSlk03-opA&eurl=http%3A%2F%2Fwww.youtube.com%2F" scrolling="no" frameborder="0" width="100%" height="430" allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true"></iframe><hr>        <h2 id="Theme-Topic-In-Style"   >          <a href="#Theme-Topic-In-Style" class="heading-link"><i class="fas fa-link"></i></a><a href="#Theme-Topic-In-Style" class="headerlink" title="Theme Topic In Style"></a>Theme Topic In Style</h2>      <p>在Activity 1 與 Activity 2 會用到的theme中加入<code>windowContentTransitions</code>並設置為true，以開啟窗口內容變換功能。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style name=<span class="string">&quot;AppTheme&quot;</span> parent=<span class="string">&quot;Theme.MaterialComponents.DayNight.NoActionBar&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;colorPrimary&quot;</span>&gt;<span class="meta">@color</span>/colorPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;colorPrimaryDark&quot;</span>&gt;<span class="meta">@color</span>/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;colorAccent&quot;</span>&gt;<span class="meta">@color</span>/colorAccent&lt;/item&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;item name=<span class="string">&quot;android:windowContentTransitions&quot;</span>&gt;<span class="literal">true</span>&lt;/item&gt;  <span class="comment">//&lt;-----this</span></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="設定圖片延展區塊"   >          <a href="#設定圖片延展區塊" class="heading-link"><i class="fas fa-link"></i></a><a href="#設定圖片延展區塊" class="headerlink" title="設定圖片延展區塊"></a>設定圖片延展區塊</h2>      <p>將Activity 1要拿來跳轉的圖片xml檔加上<code>transitionName</code>（隨便取，與另一邊對的上就好），若是RecyclerView就加在item的xml檔內。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;androidx.appcompat.widget.AppCompatImageView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/imgThumbnail&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">                  </span><br><span class="line">    android:transitionName=<span class="string">&quot;thumbnail_transition&quot;</span>   <span class="comment">//&lt;-----this</span></span><br><span class="line">/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>將Activity 2要銜接的區域也加上<code>transitionName</code>（Activity 1取什麼這邊就取一樣的）</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;FrameLayout</span><br><span class="line">    android:id=<span class="string">&quot;@+id/playerLayout&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;horizontal&quot;</span></span><br><span class="line">    </span><br><span class="line">    android:transitionName=<span class="string">&quot;thumbnail_transition&quot;</span>&gt;    <span class="comment">//&lt;-----this</span></span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;/FrameLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="頁面跳轉"   >          <a href="#頁面跳轉" class="heading-link"><i class="fas fa-link"></i></a><a href="#頁面跳轉" class="headerlink" title="頁面跳轉"></a>頁面跳轉</h2>      <p>在Activity 1的startActivity中的Bundle欄位加上ActivityOptionsCompat的設置。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> view = fingViewById(R.id.thumbnail)</span><br><span class="line"></span><br><span class="line">...   <span class="comment">//set Intent()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> option = ActivityOptionsCompat.makeSceneTransitionAnimation(</span><br><span class="line">    <span class="keyword">this</span><span class="symbol">@Activity1</span>,</span><br><span class="line">    view,</span><br><span class="line">    ViewCompat.getTransitionName(view).toString()</span><br><span class="line">)</span><br><span class="line">startActivity(intent, option.toBundle())</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="動畫速度設定"   >          <a href="#動畫速度設定" class="heading-link"><i class="fas fa-link"></i></a><a href="#動畫速度設定" class="headerlink" title="動畫速度設定"></a>動畫速度設定</h2>      <p>在Activity 2設定該頁sharedElementEnterTransition/sharedElementExitTransition的duration</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">window.sharedElementEnterTransition.duration = <span class="number">200</span></span><br><span class="line">window.sharedElementExitTransition.duration = <span class="number">200</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-應用技術-View-轉場-StartIntent-圖對圖"   >          <a href="#tags-應用技術-View-轉場-StartIntent-圖對圖" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-View-轉場-StartIntent-圖對圖" class="headerlink" title="tags: 應用技術 View 轉場 StartIntent 圖對圖"></a>tags: <code>應用技術</code> <code>View</code> <code>轉場</code> <code>StartIntent</code> <code>圖對圖</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>推播通知FCM</title>
      <link href="/tutu1023/2021/09/16/%E6%8E%A8%E6%92%AD%E9%80%9A%E7%9F%A5FCM/"/>
      <url>/tutu1023/2021/09/16/%E6%8E%A8%E6%92%AD%E9%80%9A%E7%9F%A5FCM/</url>
      
        <content type="html"><![CDATA[<p>  Update：2021/09/16<br>  Code：Java、Kotlin<br>  By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://fightwennote.blogspot.com/2019/03/android-firebase-fcm.html" >https://fightwennote.blogspot.com/2019/03/android-firebase-fcm.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://4.bp.blogspot.com/-RMUI_JC1kdQ/XIuWH7UC3uI/AAAAAAAABes/ZYKev-tQAJUC_9OQpRi05f6i1wWtedjHACLcBGAs/s640/19031502.jpg" alt="IMG_20191230_154939.jpg"></p><hr>        <h2 id="Firebase註冊Cloud-Message"   >          <a href="#Firebase註冊Cloud-Message" class="heading-link"><i class="fas fa-link"></i></a><a href="#Firebase註冊Cloud-Message" class="headerlink" title="Firebase註冊Cloud Message"></a>Firebase註冊Cloud Message</h2>      <p>到FireBase頁面，點選Cloud Messaging，並依循指示將FireBase新增到App中。</p><p><img src="https://i.imgur.com/yYgoWXl.png" alt="Imgur"></p><p>P.S. 尋找SHA-1憑證的方式。Andorid Studio 側邊有一個Gradle欄位，找到Task資料夾，找到 Tasks 資料夾，android -&gt; signingReport，點開執行就可以在下方Run找到SHA1欄位。</p><p>參考資料：<span class="exturl"><a class="exturl__link"   href="https://anson-site.blogspot.com/2018/02/sha1md5.html" >https://anson-site.blogspot.com/2018/02/sha1md5.html</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/66wpmjw.png" alt="Imgur"></p><hr>        <h2 id="Android-Studio接應"   >          <a href="#Android-Studio接應" class="heading-link"><i class="fas fa-link"></i></a><a href="#Android-Studio接應" class="headerlink" title="Android Studio接應"></a>Android Studio接應</h2>      <p>在app/build.gradle的dependencies加入依賴</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dependencies&#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.google.firebase:firebase-messaging:20.1.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>在build.gradle的dependencies加入依賴</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dependencies&#123;</span><br><span class="line">    classpath <span class="string">&#x27;com.google.gms:google-services:4.3.3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>新增一個 Class 繼承 FirebaseMessagingService，並且 Override onMessageReceived 跟 onNewToken，以及sendNotification的Function來處理/顯示通知。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirebaseService</span> <span class="keyword">extends</span> <span class="title">FirebaseMessagingService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageReceived</span><span class="params">(<span class="meta">@NotNull</span> RemoteMessage remoteMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMessageReceived(remoteMessage);</span><br><span class="line">        <span class="keyword">if</span> (remoteMessage.getNotification() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;MyFirebaseService&quot;</span>,<span class="string">&quot;title &quot;</span>+remoteMessage.getNotification().getTitle());</span><br><span class="line">            Log.i(<span class="string">&quot;MyFirebaseService&quot;</span>,<span class="string">&quot;body &quot;</span>+remoteMessage.getNotification().getBody());</span><br><span class="line">            </span><br><span class="line">            sendNotification(remoteMessage.getNotification().getTitle(),</span><br><span class="line">                    remoteMessage.getNotification().getBody(),vid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewToken</span><span class="params">(<span class="meta">@NotNull</span> String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onNewToken(s);</span><br><span class="line">        Log.i(<span class="string">&quot;MyFirebaseService&quot;</span>,<span class="string">&quot;token &quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendNotification</span><span class="params">(String messageTitle, String messageBody, <span class="keyword">int</span> vid)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, WelcomePage.class);</span><br><span class="line">        PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent,</span><br><span class="line">                PendingIntent.FLAG_ONE_SHOT);                                     <span class="comment">//設定點擊通知要跳轉的路徑</span></span><br><span class="line"></span><br><span class="line">        String channelId = <span class="string">&quot;default_channel_id&quot;</span>;</span><br><span class="line">        Uri defaultSoundUri =RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);</span><br><span class="line">        NotificationCompat.Builder notificationBuilder = </span><br><span class="line">                <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, channelId)                   </span><br><span class="line">                        .setContentTitle(messageTitle)                            <span class="comment">//標題</span></span><br><span class="line">                        .setSmallIcon(R.drawable.ic_noti_58)                      <span class="comment">//icon</span></span><br><span class="line">                        .setColor(getResources().getColor(R.color.ThemeTiffany))  <span class="comment">//主題顏色</span></span><br><span class="line">                        .setContentText(messageBody)                              <span class="comment">//訊息內容        </span></span><br><span class="line">                        .setAutoCancel(<span class="keyword">true</span>)                                      <span class="comment">//點擊後通知自動消失</span></span><br><span class="line">                        .setPriority(NotificationCompat.PRIORITY_HIGH)            <span class="comment">//優先程度</span></span><br><span class="line">                        .setSound(defaultSoundUri)                                <span class="comment">//提示音</span></span><br><span class="line">                        .setContentIntent(pendingIntent);                         <span class="comment">//套用路徑Intent</span></span><br><span class="line"></span><br><span class="line">        NotificationManager notificationManager =</span><br><span class="line">                (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Android Oreo後，規定需要創建Channel才能顯示通知</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">            NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(channelId,</span><br><span class="line">                    <span class="string">&quot;default_channel_name&quot;</span>,</span><br><span class="line">                    NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">            channel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);</span><br><span class="line">            <span class="keyword">assert</span> notificationManager != <span class="keyword">null</span>;</span><br><span class="line">            notificationManager.createNotificationChannel(channel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> notificationManager != <span class="keyword">null</span>;</span><br><span class="line">        notificationManager.notify(<span class="number">0</span>, notificationBuilder.build()); <span class="comment">//丟出通知</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>在 AndroidMenifest.xml 的 application 標籤裡聲明MyFirebaseService 。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;service android:name=<span class="string">&quot;com.example.fcmdemoapp.MyFirebaseService&quot;</span>&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=<span class="string">&quot;com.google.firebase.MESSAGING_EVENT&quot;</span> /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">    &lt;/service&gt;</span><br><span class="line">&lt;/application&gt; </span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>由於在發送正式推播之前要先在手邊的手機設備上作微調以及測試的動作，所以我們需要在程式碼中加入FirebaseInstanceId.getInstance().instanceId方法來拿取手機設備的token</p><p>token通常於app第一次安裝時會產生一組新的。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FirebaseInstanceId.getInstance().instanceId</span><br><span class="line">    .addOnCompleteListener &#123;</span><br><span class="line">        <span class="keyword">if</span> (!it.isSuccessful) &#123;</span><br><span class="line">            <span class="keyword">return</span><span class="meta">@addOnCompleteListener</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( it.result == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span><span class="meta">@addOnCompleteListener</span></span><br><span class="line">            <span class="comment">// Get new Instance ID token</span></span><br><span class="line">            val token = it.result!!.token</span><br><span class="line">            <span class="comment">// Log and toast</span></span><br><span class="line">            Log.i(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;token $token&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><img src="https://4.bp.blogspot.com/-8HQuORNy-uQ/XI3h6ix4yHI/AAAAAAAABh0/dtizfbVjBS4J187MYgEK_yypM6xwmrLngCLcBGAs/s640/19031703.jpg" alt="Imgur"></p><p>拿到token後就可以到Firebase的Cloud Messaging傳送測試訊息囉！<br>輸入完訊息標題以及內文後，就可以點擊旁邊的「傳送測試訊息」，貼上並加入token，就可以傳送囉。</p><p><img src="https://3.bp.blogspot.com/-iWLu6ng2hMI/XI3jNE8xFnI/AAAAAAAABiA/zDOOuUQ0oEwMqFWy602jVHlwDvPgNZ9xwCLcBGAs/s640/19031704.jpg" alt="Imgur"></p><p>這樣就能收到訊息囉！</p><hr>        <h2 id="需注意的地方"   >          <a href="#需注意的地方" class="heading-link"><i class="fas fa-link"></i></a><a href="#需注意的地方" class="headerlink" title="需注意的地方"></a>需注意的地方</h2>      <p>因為前述onMessageRecieve只有app在前台的時候會執行，如果我們的 App 放到背景，甚至是關閉，推播的Notification會變成系統預設樣式，<br>然而預設系統樣式能夠變化的只有 small icon 跟 文字顏色。</p><p>在 AndroidMenifest.xml 的 application 標籤裡聲明MetaData，就可以在預設情況下改變icon以及顏色。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=<span class="string">&quot;com.google.firebase.messaging.default_notification_icon&quot;</span></span><br><span class="line">        android:resource=<span class="string">&quot;@drawable/ic_noti_58&quot;</span> /&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=<span class="string">&quot;com.google.firebase.messaging.default_notification_color&quot;</span></span><br><span class="line">        android:resource=<span class="string">&quot;@color/ThemeTiffany&quot;</span> /&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/application&gt; </span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="2021-08-17補充❌"   >          <a href="#2021-08-17補充❌" class="heading-link"><i class="fas fa-link"></i></a><a href="#2021-08-17補充❌" class="headerlink" title="2021/08/17補充❌"></a>2021/08/17補充❌</h3>      <p><code>default_notification_icon</code>若是放在drawable時是無法被<code>defalut_notification_color</code>改變顏色的，需以mipmap方式且icon顏色為白色，才能在通知欄拉開時顯示主題色標題，且通知欄最小化時仍是「淺色底灰icon」/「深色底白icon」</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=<span class="string">&quot;com.google.firebase.messaging.default_notification_icon&quot;</span></span><br><span class="line">        android:resource=<span class="string">&quot;@⭕️mipmap⭕️/ic_noti_58&quot;</span> /&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=<span class="string">&quot;com.google.firebase.messaging.default_notification_color&quot;</span></span><br><span class="line">        android:resource=<span class="string">&quot;@color/ThemeTiffany&quot;</span> /&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/application&gt; </span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><img src="https://i.imgur.com/itK8sBX.png" alt="Imgur"></p><p>這樣完美符合Android系統生態了❤️</p><hr>        <h2 id="傳值"   >          <a href="#傳值" class="heading-link"><i class="fas fa-link"></i></a><a href="#傳值" class="headerlink" title="傳值"></a>傳值</h2>      <p>如果需要傳值並處理的話，可以在其他選項加入自訂資料</p><p><img src="https://i.imgur.com/wlivxM1.png" alt="Imgur"></p><p>由於app前台的通知處理以及後台的通知處理不一樣，先來說說該如何處理前台～</p>        <h3 id="前台onMessageReceive"   >          <a href="#前台onMessageReceive" class="heading-link"><i class="fas fa-link"></i></a><a href="#前台onMessageReceive" class="headerlink" title="前台onMessageReceive"></a>前台onMessageReceive</h3>      <p>利用remoteMessage.getData().entrySet()</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry: remoteMessage.getData().entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(entry.getKey().equals(<span class="string">&quot;key&quot;</span>))&#123;</span><br><span class="line">        key= Integer.parseInt(entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="預設系統樣式"   >          <a href="#預設系統樣式" class="heading-link"><i class="fas fa-link"></i></a><a href="#預設系統樣式" class="headerlink" title="預設系統樣式"></a>預設系統樣式</h3>      <p>在點開通知第一個啟動的Activity中，接取該Activity的Intent。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.intent.hasExtra(<span class="string">&quot;key&quot;</span>))&#123;    <span class="comment">//開啟app時</span></span><br><span class="line">    <span class="keyword">val</span> fbVid = <span class="keyword">this</span>.intent.getStringExtra(<span class="string">&quot;key&quot;</span>).toInt()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><hr>        <h2 id="移除推播通知"   >          <a href="#移除推播通知" class="heading-link"><i class="fas fa-link"></i></a><a href="#移除推播通知" class="headerlink" title="移除推播通知"></a>移除推播通知</h2>              <h3 id="移除所有推播"   >          <a href="#移除所有推播" class="heading-link"><i class="fas fa-link"></i></a><a href="#移除所有推播" class="headerlink" title="移除所有推播"></a>移除所有推播</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> notificationManager = context!!.getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line">notificationManager.cancelAll()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="移除特定推播"   >          <a href="#移除特定推播" class="heading-link"><i class="fas fa-link"></i></a><a href="#移除特定推播" class="headerlink" title="移除特定推播"></a>移除特定推播</h3>      <p>若想要移除同類型推播通知(如某特定對象傳來的多則訊息)，則可以使用notificationManager.cancel(id)來進行移除。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> notificationManager = context!!.getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line">notificationManager.cancel(id)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>前提是在發出推播訊息時的notificationManager.notify(id, notificationBuilder.build())，id欄位須設定值。但在系統通知預設的情況下還不知道如何改變Notification ID的值。</p><p>Firebase弄了一個這麼重要的FCM功能，居然不能直接支援改變系統的預設通知，傻眼貓咪。</p><hr>        <h2 id="遇到問題"   >          <a href="#遇到問題" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到問題" class="headerlink" title="遇到問題"></a>遇到問題</h2>              <h4 id="預設情況下如何指定跳轉頁面"   >          <a href="#預設情況下如何指定跳轉頁面" class="heading-link"><i class="fas fa-link"></i></a><a href="#預設情況下如何指定跳轉頁面" class="headerlink" title="預設情況下如何指定跳轉頁面"></a>預設情況下如何指定跳轉頁面</h4>      <p>notificationMessage 可傳值 click_action ，用於點擊預設推播通知時要跳往的頁面。</p><figure class="highlight plain"><figcaption><span>".Main.WelcomePage" ```  名字可以自己取，只要與intent-filter命名一致就行</span></figcaption><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;activity android:name&#x3D;&quot;your activity&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name&#x3D;&quot;.Main.WelcomePage&quot; &#x2F;&gt;   &#x2F;&#x2F;與click_action命名一致</span><br><span class="line">                &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;intent-filter&gt;</span><br><span class="line">    &lt;&#x2F;activity&gt;</span><br><span class="line">&lt;&#x2F;application</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-工具教學-Firebase-推播通知-Notification"   >          <a href="#tags-工具教學-Firebase-推播通知-Notification" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-工具教學-Firebase-推播通知-Notification" class="headerlink" title="tags: 工具教學 Firebase 推播通知 Notification"></a>tags: <code>工具教學</code> <code>Firebase</code> <code>推播通知</code> <code>Notification</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Detected problems with API compatibility</title>
      <link href="/tutu1023/2021/04/29/Detected%20problems%20with%20API%20compatibility/"/>
      <url>/tutu1023/2021/04/29/Detected%20problems%20with%20API%20compatibility/</url>
      
        <content type="html"><![CDATA[<p>  Update：2020/01/07<br>  By：Ada</p><p>  <img src="https://i.imgur.com/K6V2qMA.png" alt="Imgur"></p><hr>        <h3 id="可能原因"   >          <a href="#可能原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h3>              <h5 id="只在Andorid-9、10上出現"   >          <a href="#只在Andorid-9、10上出現" class="heading-link"><i class="fas fa-link"></i></a><a href="#只在Andorid-9、10上出現" class="headerlink" title="只在Andorid 9、10上出現"></a>只在Andorid 9、10上出現</h5>      <ul><li>  當前一頁有Dialog未關閉而造成內存外洩時會顯示(11月前)</li><li>  app/build.gradle的targetSDK &lt; 28 每次開啟都會顯示(12月開始)</li><li>  使用到隱藏Api也會顯示(Andorid 9 後開始想要補救開源的安卓系統)</li></ul>        <h4 id="暫時的解決方法"   >          <a href="#暫時的解決方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#暫時的解決方法" class="headerlink" title="暫時的解決方法"></a>暫時的解決方法</h4>      <p>在最一開始Activity的onCreate呼叫自定義disableAPIDialog方法，可將該視窗隱藏起來，同時又能保留app內建的dialog。</p><p>參考方法：<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/zpjsmalltime/article/details/86577058" >https://blog.csdn.net/zpjsmalltime/article/details/86577058</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        disableAPIDialog()</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 反射 禁止弹窗</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">disableAPIDialog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">28</span>)<span class="keyword">return</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> clazz = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> currentActivityThread = clazz.getDeclaredMethod(<span class="string">&quot;currentActivityThread&quot;</span>)</span><br><span class="line">            currentActivityThread.isAccessible = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">val</span> activityThread = currentActivityThread.invoke(<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">val</span> mHiddenApiWarningShown = clazz.getDeclaredField(<span class="string">&quot;mHiddenApiWarningShown&quot;</span>)</span><br><span class="line">            mHiddenApiWarningShown.isAccessible = <span class="literal">true</span></span><br><span class="line">            mHiddenApiWarningShown.setBoolean(activityThread, <span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e:Exception ) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><hr>        <h3 id="相關資料"   >          <a href="#相關資料" class="heading-link"><i class="fas fa-link"></i></a><a href="#相關資料" class="headerlink" title="相關資料"></a>相關資料</h3>      <p>  <span class="exturl"><a class="exturl__link"   href="https://www.520mwx.com/view/21227" >由”Detected problems with API compatibility”引发的一系列问题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>  <span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/u013718730/article/details/89316482" >【Android】【设备适配】android9.0去除Detected problems with API compatibility弹窗</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>  <span class="exturl"><a class="exturl__link"   href="https://juejin.im/post/5d406ea0f265da03aa25493d" >适配Android P之非SDK接口限制的排查方法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p> <span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/zpjsmalltime/article/details/86577058" >Detected problems with API 弹窗 屏蔽解决方案 android</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> (解決方法)</p>        <h6 id="tags-問題說明-Android-9-Detected-警告視窗"   >          <a href="#tags-問題說明-Android-9-Detected-警告視窗" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-問題說明-Android-9-Detected-警告視窗" class="headerlink" title="tags: 問題說明 Android 9 Detected 警告視窗"></a>tags: <code>問題說明</code> <code>Android 9</code> <code>Detected</code> <code>警告視窗</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>頁面刷新HeadView</title>
      <link href="/tutu1023/2021/04/29/%E9%A0%81%E9%9D%A2%E5%88%B7%E6%96%B0HeadView/"/>
      <url>/tutu1023/2021/04/29/%E9%A0%81%E9%9D%A2%E5%88%B7%E6%96%B0HeadView/</url>
      
        <content type="html"><![CDATA[<p>Update：2019/12/06  Code：Kotlin<br>By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://github.com/xyxyLiu/SwipeRefreshLayout" >https://github.com/xyxyLiu/SwipeRefreshLayout</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/UZqmi6f.png" alt="Imgur"></p><p><img src="https://i.imgur.com/znkFoIS.gif" alt="Img!"></p><p>拖曳時風扇扇葉會隨著拖曳幅度而增加旋轉角度，因此須將美工圖分為兩個部分。   </p><ul><li>  電扇旋轉切割圖(png*8)</li><li>  右邊單純動畫(gif*1)</li></ul><hr><p>1.導入依賴</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.reginald.swiperefresh:library:1.1.2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>2.將CustomSwipeRefreshLayout包裹在欲更新的RecyclerView外，並設定相關swiperefresh時間(毫秒)</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;com.reginald.swiperefresh.CustomSwipeRefreshLayout</span><br><span class="line">    android:id=&quot;@+id/mSwipeRefresh&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    swiperefresh:refresh_mode=&quot;pull_mode&quot;</span><br><span class="line">    swiperefresh:time_out_refresh_complete=&quot;500&quot;</span><br><span class="line">    swiperefresh:time_out_return_to_top=&quot;500&quot;</span><br><span class="line">    swiperefresh:return_to_top_duration=&quot;500&quot;</span><br><span class="line">    swiperefresh:return_to_header_duration=&quot;500&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">            ...</span><br><span class="line">            android:id=&quot;@+id/recyclerView&quot;&gt;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.recyclerview.widget.RecyclerView</span>&gt;</span>                </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.reginald.swiperefresh.CustomSwipeRefreshLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>3.在RecyclerView所在的Activity/Fragment中，引用CustomSwipeRefreshLayout.OnRefreshListener</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentTemplete</span>: <span class="type">Fragment</span></span>(),  BaseQuickAdapter.RequestLoadMoreListener, </span><br><span class="line">    CustomSwipeRefreshLayout.OnRefreshListener&#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>4.系統會要求一個onRefresh來執行更新時要做的事情</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onRefresh</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">data</span>.clear()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>5.需要先為2.放置的CustomSwipeRefreshLayout宣告一個變數(記得是不能直接拿來使用)</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> mSwip: CustomSwipeRefreshLayout? =<span class="literal">null</span></span><br><span class="line"></span><br><span class="line">mSwip = findViewById(R.id.mSwipeRefresh)</span><br><span class="line">mSwip!!.setOnRefreshListener(<span class="keyword">this</span>)</span><br><span class="line">mSwip!!.setCustomHeadview(MyCustomHeadView(context) <span class="keyword">as</span> View)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>記得要在更新完後呼叫一個mSwip!!.refreshComplete()</p><p>6.在創造MyCustomHeadView前，先為MyCustomHeadView弄一個layout<br>由於動圖希望是固定在RecyclerView底下，在拉的時候能夠先看見動圖頂部，因此將動圖藏於MainActivity。</p><p><img src="https://i.imgur.com/UrULXMY.png" alt="Imgur"></p><p>若是希望動圖由RecyclerView上方跟著拖曳一起拉下來的話，就可以把動圖藏在MyCustomHeadView的Layout中</p><p>↓原始MyCustomHeadView的位置<br><img src="https://i.imgur.com/dlrIcwg.png" alt="Imgur"></p><p>7.創建一個MyCustomHeadView並引用CustomSwipeRefreshLayout.CustomSwipeRefreshHeadLayout</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCustomHeadView</span> <span class="title">extends</span> <span class="title">LinearLayout</span> </span></span><br><span class="line">        implements CustomSwipeRefreshLayout.CustomSwipeRefreshHeadLayout &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="keyword">final</span> SparseArray&lt;String&gt; STATE_MAP = new SparseArray&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> ViewGroup mContainer;</span><br><span class="line">    <span class="keyword">private</span> pl.droidsonroids.gif.GifImageView anim;</span><br><span class="line">    <span class="keyword">private</span> ConstraintLayout mConstrainLayout;</span><br><span class="line">    <span class="keyword">private</span> int mState = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        STATE_MAP.put(<span class="number">0</span>, <span class="string">&quot;STATE_NORMAL&quot;</span>);</span><br><span class="line">        STATE_MAP.put(<span class="number">1</span>, <span class="string">&quot;STATE_READY&quot;</span>);</span><br><span class="line">        STATE_MAP.put(<span class="number">2</span>, <span class="string">&quot;STATE_REFRESHING&quot;</span>);</span><br><span class="line">        STATE_MAP.put(<span class="number">3</span>, <span class="string">&quot;STATE_COMPLETE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>設定建構子以及建構時要做的事情</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> MyCustomHeadView(Context context) &#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">    setupLayout();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">&quot;InflateParams&quot;</span>)</span></span><br><span class="line"><span class="keyword">private</span> void setupLayout() &#123;</span><br><span class="line">    ViewGroup.LayoutParams lp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class="line">    mContainer = (ConstraintLayout) LayoutInflater.from(getContext()).inflate(R.layout.my_swiperefresh_head_layout, <span class="literal">null</span>);</span><br><span class="line">    addView(mContainer, lp);</span><br><span class="line">    setGravity(Gravity.BOTTOM);</span><br><span class="line">    setBackgroundColor(Color.TRANSPARENT);</span><br><span class="line">    mConstrainLayout = findViewById(com.reginald.swiperefresh.R.id.default_header_content);</span><br><span class="line">    anim = findViewById(R.id.headAnim);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>onStateChange決定每個階段要做的事情</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">&quot;SetTextI18n&quot;</span>)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> void onStateChange(CustomSwipeRefreshLayout.State state, CustomSwipeRefreshLayout.State lastState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG)</span><br><span class="line">        Log.d(<span class="string">&quot;csrh&quot;</span>, <span class="string">&quot;onStateChange state = &quot;</span> + state + <span class="string">&quot;, lastState = &quot;</span> + lastState);</span><br><span class="line">    int stateCode = state.getRefreshState();</span><br><span class="line">    int lastStateCode = lastState.getRefreshState();</span><br><span class="line">    float percent = state.getPercent();</span><br><span class="line">    AnimationDrawable animationDrawable;    <span class="comment">//When Ready, 要讓風扇一直轉圈的動畫設定</span></span><br><span class="line">    switch (stateCode) &#123;</span><br><span class="line">        case CustomSwipeRefreshLayout.State.STATE_NORMAL:</span><br><span class="line">            ConstraintLayout.LayoutParams layoutParams </span><br><span class="line">                = (ConstraintLayout.LayoutParams) mConstrainLayout.getLayoutParams();</span><br><span class="line">            layoutParams.topMargin = getTop() - (int)percent*<span class="number">100</span>;</span><br><span class="line">            mConstrainLayout.setLayoutParams(layoutParams);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (percent &gt; <span class="number">0.3f</span>) &#123;    <span class="comment">//percent&gt;0.3f時開始旋轉</span></span><br><span class="line">                int current = (int) ((percent*<span class="number">100</span>-<span class="number">50</span>)/<span class="number">3</span>);</span><br><span class="line">                switch (current)&#123;</span><br><span class="line">                    case <span class="number">1</span> :</span><br><span class="line">                        MainActivity.fanImageView.setImageDrawable(fan2);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                        ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br></pre></td></tr></table></div></figure><p>圖片替換的方法，是先將圖片資源load到變數中，在因應時機替換變數上去，否則動畫直接撈資源耗效能，手機會卡卡的。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drawable fan1= getResources().getDrawable(R.drawable.fan1);  <span class="comment">//順暢</span></span><br><span class="line">    fanImageView.setImageDrawable(fan1)</span><br><span class="line">    </span><br><span class="line">```    </span><br><span class="line">    v.s.</span><br><span class="line"></span><br><span class="line">```kotlin</span><br><span class="line"></span><br><span class="line">    fanImageView.setImageDrawable(getResources().getDrawable(R.drawable.fan1))   <span class="comment">//卡頓</span></span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>Ready且手指還沒放開的時候，要讓風扇不斷轉動，提醒使用者已經可以放開更新了。所以用寫好的Drawable代入AnamationDrawable。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">            case CustomSwipeRefreshLayout.State.STATE_READY:</span><br><span class="line">                <span class="keyword">if</span> (stateCode != lastStateCode) &#123;</span><br><span class="line">                    fanImageView.setImageResource(R.drawable.rotate_fan);</span><br><span class="line">                    animationDrawable = (AnimationDrawable) MainActivity.fanImageView.getDrawable();</span><br><span class="line">                    animationDrawable.setOneShot(<span class="literal">false</span>);</span><br><span class="line">                    animationDrawable.start();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            case CustomSwipeRefreshLayout.State.STATE_REFRESHING:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            case CustomSwipeRefreshLayout.State.STATE_COMPLETE:</span><br><span class="line">                <span class="keyword">if</span> (stateCode != lastStateCode) &#123;</span><br><span class="line">                    Handler handler = new Handler();</span><br><span class="line">                    handler.postDelayed(() -&gt; fanImageView.setImageDrawable(fan1), <span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            default:</span><br><span class="line">        &#125;</span><br><span class="line">        mState = stateCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rotate_fan.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;animation-list xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">                android:oneshot=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan1&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan2&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan3&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan4&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan5&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan6&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan7&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">    &lt;item android:drawable=<span class="string">&quot;@drawable/fan8&quot;</span> android:duration=<span class="string">&quot;50&quot;</span> /&gt;</span><br><span class="line">&lt;/animation-list&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><hr>        <h2 id="後記"   >          <a href="#後記" class="heading-link"><i class="fas fa-link"></i></a><a href="#後記" class="headerlink" title="後記"></a>後記</h2>      <p>當targetSdkVersion &gt;= 28，刷新時會造成APP閃退。這時只要將enableTopProgressBar設定為false就能夠在targetSdkVersion &gt;= 28時正常使用了。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> swipeRefreshLayout = findViewById(R.id.swipeRefreshLayout)</span><br><span class="line">swipeRefreshLayout.enableTopProgressBar(<span class="literal">false</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-應用技術-View-下拉刷新-Refresh-SwipeRefresh"   >          <a href="#tags-應用技術-View-下拉刷新-Refresh-SwipeRefresh" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-View-下拉刷新-Refresh-SwipeRefresh" class="headerlink" title="tags: 應用技術 View 下拉刷新 Refresh SwipeRefresh"></a>tags: <code>應用技術</code> <code>View</code> <code>下拉刷新</code> <code>Refresh</code> <code>SwipeRefresh</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浮動目錄PopMenu(附指定APP分享路徑)</title>
      <link href="/tutu1023/2021/04/29/%E6%B5%AE%E5%8B%95%E7%9B%AE%E9%8C%84PopMenu(%E9%99%84%E6%8C%87%E5%AE%9AAPP%E5%88%86%E4%BA%AB%E8%B7%AF%E5%BE%91)/"/>
      <url>/tutu1023/2021/04/29/%E6%B5%AE%E5%8B%95%E7%9B%AE%E9%8C%84PopMenu(%E9%99%84%E6%8C%87%E5%AE%9AAPP%E5%88%86%E4%BA%AB%E8%B7%AF%E5%BE%91)/</url>
      
        <content type="html"><![CDATA[<p>Update：2020/04/15  Code：Kotlin<br>By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://github.com/joelan/WeiboPopupMenu" >https://github.com/joelan/WeiboPopupMenu</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/KbMThEy.png" alt="Imgur"></p><hr>        <h3 id="1-創建一個PopMenu且加入MenuItem"   >          <a href="#1-創建一個PopMenu且加入MenuItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-創建一個PopMenu且加入MenuItem" class="headerlink" title="1.創建一個PopMenu且加入MenuItem"></a>1.創建一個PopMenu且加入MenuItem</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> message=<span class="string">&quot;your message&quot;</span></span><br><span class="line"><span class="keyword">val</span> mPopMenu = PopMenu.Builder().attachToActivity(<span class="keyword">this</span>)</span><br><span class="line">    .addMenuItem(PopMenuItem(<span class="string">&quot;LINE&quot;</span>, resources.getDrawable(R.drawable.line)))</span><br><span class="line">    .addMenuItem(PopMenuItem(<span class="string">&quot;動態消息&quot;</span>, resources.getDrawable(R.drawable.facebook)))</span><br><span class="line">    .addMenuItem(PopMenuItem(<span class="string">&quot;Telegram&quot;</span>, resources.getDrawable(R.drawable.telegram)))</span><br><span class="line">    .addMenuItem(PopMenuItem(<span class="string">&quot;訊息&quot;</span>, resources.getDrawable(R.drawable.message)))</span><br><span class="line">    .addMenuItem(PopMenuItem(<span class="string">&quot;複製鏈結&quot;</span>, resources.getDrawable(R.drawable.hyperlink)))</span><br><span class="line">    .addMenuItem(PopMenuItem(<span class="string">&quot;顯示更多&quot;</span>, resources.getDrawable(R.drawable.other)))</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="2-設定Item的ClickListener"   >          <a href="#2-設定Item的ClickListener" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-設定Item的ClickListener" class="headerlink" title="2.設定Item的ClickListener"></a>2.設定Item的ClickListener</h3>      <p>利用mPopMenu.getMenuItem(position).textView.text作為按鈕判斷指標</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.setOnItemClickListener &#123; popMenu, position -&gt;</span><br><span class="line">    <span class="keyword">when</span>(mPopMenu.getMenuItem(position).textView.text)&#123;</span><br><span class="line">        <span class="string">&quot;LINE&quot;</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> sendIntent = Intent()</span><br><span class="line">            sendIntent.flags=Intent.FLAG_ACTIVITY_SINGLE_TOP</span><br><span class="line">            sendIntent.action = Intent.ACTION_SEND</span><br><span class="line">            sendIntent.putExtra(Intent.EXTRA_TEXT, message)</span><br><span class="line">            sendIntent.type = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">            sendIntent.`<span class="keyword">package</span>`=<span class="string">&quot;jp.naver.line.android&quot;</span></span><br><span class="line">            startActivity(Intent.createChooser(sendIntent, <span class="string">&quot;分享內容到...&quot;</span>))</span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="string">&quot;動態消息&quot;</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> sendIntent = Intent()</span><br><span class="line">            sendIntent.flags=Intent.FLAG_ACTIVITY_SINGLE_TOP</span><br><span class="line">            sendIntent.action = Intent.ACTION_SEND</span><br><span class="line">            sendIntent.putExtra(Intent.EXTRA_TEXT, message)</span><br><span class="line">            sendIntent.type = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">            sendIntent.`<span class="keyword">package</span>`=<span class="string">&quot;com.facebook.katana&quot;</span></span><br><span class="line">            startActivity(Intent.createChooser(sendIntent, <span class="string">&quot;分享內容到...&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;Telegram&quot;</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> myIntent = Intent(Intent.ACTION_SEND)</span><br><span class="line">            myIntent.type = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">            myIntent.setPackage(<span class="string">&quot;org.telegram.messenger&quot;</span>)</span><br><span class="line">            myIntent.putExtra(Intent.EXTRA_TEXT, message)</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                startActivity(myIntent)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( ex:android.content.ActivityNotFoundException) &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;Telegram Not Install&quot;</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;訊息&quot;</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> sendIntent = Intent( Intent.ACTION_VIEW, Uri.parse( <span class="string">&quot;sms:&quot;</span> + <span class="string">&quot;&quot;</span> ) )</span><br><span class="line">            sendIntent.putExtra( <span class="string">&quot;sms_body&quot;</span>, message )</span><br><span class="line">            startActivity(sendIntent)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;複製鏈結&quot;</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> clipboard = getSystemService(Context.CLIPBOARD_SERVICE) <span class="keyword">as</span> ClipboardManager</span><br><span class="line">            <span class="keyword">val</span> clip = ClipData.newPlainText(<span class="string">&quot;58_share&quot;</span>, message)</span><br><span class="line">            clipboard.setPrimaryClip(clip)</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;鏈結已複製&quot;</span>,Toast.LENGTH_LONG).show()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;顯示更多&quot;</span> -&gt; &#123;</span><br><span class="line">            <span class="keyword">val</span> sendIntent = Intent()</span><br><span class="line">            sendIntent.flags=Intent.FLAG_ACTIVITY_SINGLE_TOP</span><br><span class="line">            sendIntent.action = Intent.ACTION_SEND</span><br><span class="line">            sendIntent.putExtra(Intent.EXTRA_TEXT, message)</span><br><span class="line">            sendIntent.type = <span class="string">&quot;text/plain&quot;</span></span><br><span class="line">            startActivity(Intent.createChooser(sendIntent, <span class="string">&quot;分享內容到...&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="3-設定欄位數以及建立"   >          <a href="#3-設定欄位數以及建立" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-設定欄位數以及建立" class="headerlink" title="3.設定欄位數以及建立"></a>3.設定欄位數以及建立</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.columnCount(<span class="number">6</span>)</span><br><span class="line">.build()            </span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="4-設定其他客製化選項以及顯示"   >          <a href="#4-設定其他客製化選項以及顯示" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-設定其他客製化選項以及顯示" class="headerlink" title="4.設定其他客製化選項以及顯示"></a>4.設定其他客製化選項以及顯示</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mPopMenu.setmBackGroundColor(resources.getColor(R.color.TransBlackDeep))</span><br><span class="line">mPopMenu.setmCloseButtomResourceid(R.drawable.baseline_clear_24)<span class="comment">//X圖示，顏色需於XML先行設定</span></span><br><span class="line">mPopMenu.setmMarginTopRemainSpace(<span class="number">3.0f</span>)<span class="comment">//設定ＭarginTop的數值Ｆ</span></span><br><span class="line">mPopMenu.textcolor=R.color.TextWhiteGray<span class="comment">//Item標題顏色</span></span><br><span class="line">mPopMenu.show()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-應用技術-View-Menu-PopMenu-Share"   >          <a href="#tags-應用技術-View-Menu-PopMenu-Share" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-View-Menu-PopMenu-Share" class="headerlink" title="tags: 應用技術 View Menu PopMenu Share"></a>tags: <code>應用技術</code> <code>View</code> <code>Menu</code> <code>PopMenu</code> <code>Share</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浮動圖示FloatingView</title>
      <link href="/tutu1023/2021/04/29/%E6%B5%AE%E5%8B%95%E5%9C%96%E7%A4%BAFloatingView/"/>
      <url>/tutu1023/2021/04/29/%E6%B5%AE%E5%8B%95%E5%9C%96%E7%A4%BAFloatingView/</url>
      
        <content type="html"><![CDATA[<p>Update：2019/12/11  Code：Java、Kotlin<br>By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://github.com/recruit-lifestyle/FloatingView" >https://github.com/recruit-lifestyle/FloatingView</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/FPjviHU.png" alt="Imgur"></p><p>圖示需要漂浮在桌面以及其他應用程式上方，方便使用者快速回到APP。</p><hr><p>1.加入依賴到build.gradle(Module:app)</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">&quot;https://jitpack.io&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.github.recruit-lifestyle:FloatingView:2.4.4&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>2.創建一個伺服器</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatHeadService</span> <span class="keyword">extends</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">FloatingViewListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;ChatHeadService&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_CUTOUT_SAFE_AREA = <span class="string">&quot;cutout_safe_area&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTIFICATION_ID = <span class="number">9083150</span>;</span><br><span class="line">    <span class="keyword">private</span> FloatingViewManager mFloatingViewManager;</span><br><span class="line">    <span class="keyword">private</span> ImageView iconView;</span><br><span class="line">    <span class="meta">@TargetApi(Build.VERSION_CODES.Q)</span></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.M)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFloatingViewManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> START_STICKY;   <span class="comment">//如果已經存在就直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> DisplayMetrics metrics = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">        <span class="keyword">final</span> WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        <span class="keyword">assert</span> windowManager != <span class="keyword">null</span>;</span><br><span class="line">        windowManager.getDefaultDisplay().getMetrics(metrics);</span><br><span class="line">        <span class="keyword">final</span> LayoutInflater inflater = LayoutInflater.from(<span class="keyword">this</span>);</span><br><span class="line">        iconView = (ImageView) inflater.inflate(R.layout.widget_chathead, <span class="keyword">null</span>, <span class="keyword">false</span>);  </span><br><span class="line">        Bitmap bmp;    <span class="comment">//設定圖示</span></span><br><span class="line">        <span class="keyword">int</span> width=<span class="number">300</span>;</span><br><span class="line">        <span class="keyword">int</span> height=<span class="number">300</span>;</span><br><span class="line">        bmp = BitmapFactory.decodeResource(getResources(),R.drawable.rd);<span class="comment">//image is your image</span></span><br><span class="line">        bmp = Bitmap.createScaledBitmap(bmp, width,height, <span class="keyword">true</span>);</span><br><span class="line">        iconView.setImageBitmap(bmp);</span><br><span class="line">        iconView.setOnClickListener(view -&gt; &#123;</span><br><span class="line">            <span class="comment">//點擊圖示後要做的事情</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mFloatingViewManager = <span class="keyword">new</span> FloatingViewManager(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">        mFloatingViewManager.setFixedTrashIconImage(R.drawable.ic_trash_fixed);</span><br><span class="line">        mFloatingViewManager.setActionTrashIconImage(R.drawable.ic_trash_action);</span><br><span class="line">        mFloatingViewManager.setSafeInsetRect((Rect) intent.getParcelableExtra(EXTRA_CUTOUT_SAFE_AREA));</span><br><span class="line">        <span class="keyword">final</span> FloatingViewManager.Options options = <span class="keyword">new</span> FloatingViewManager.Options();</span><br><span class="line">        options.overMargin = (<span class="keyword">int</span>) (<span class="number">16</span> * metrics.density);</span><br><span class="line">        mFloatingViewManager.addViewToWindow(iconView, options);</span><br><span class="line">        <span class="comment">// 常駐起動</span></span><br><span class="line">        startForeground(NOTIFICATION_ID, createNotification(<span class="keyword">this</span>));</span><br><span class="line">        YoYo.with(Techniques.Shake)   <span class="comment">//YoYo為動畫套件 主要作用為產生圖示時博取使用者注意的震動</span></span><br><span class="line">                .duration(<span class="number">500</span>)</span><br><span class="line">                .repeat(<span class="number">1</span>)</span><br><span class="line">                .playOn(iconView);</span><br><span class="line">        <span class="keyword">return</span> START_REDELIVER_INTENT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        destroy();</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinishFloatingView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stopSelf();</span><br><span class="line">        Log.d(TAG, getString(R.string.finish_deleted));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTouchFinished</span><span class="params">(<span class="keyword">boolean</span> isFinishing, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFinishing) &#123;</span><br><span class="line">            Log.d(TAG, getString(R.string.deleted_soon));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.d(TAG, getString(R.string.touch_finished_position, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFloatingViewManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mFloatingViewManager.removeAllViewToWindow();</span><br><span class="line">            mFloatingViewManager = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Notification <span class="title">createNotification</span><span class="params">(Context context)</span> </span>&#123;   <span class="comment">//設置通知</span></span><br><span class="line">        <span class="keyword">final</span> NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(context, context.getString(R.string.default_floatingview_channel_id));</span><br><span class="line">        builder.setWhen(System.currentTimeMillis());</span><br><span class="line">        builder.setSmallIcon(R.mipmap.ic_noti_58);</span><br><span class="line">        builder.setContentTitle(context.getString(R.string.chathead_content_title));</span><br><span class="line">        builder.setContentText(context.getString(R.string.content_text));</span><br><span class="line">        builder.setOngoing(<span class="keyword">true</span>);</span><br><span class="line">        builder.setPriority(NotificationCompat.PRIORITY_MIN);</span><br><span class="line">        builder.setCategory(NotificationCompat.CATEGORY_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>3.在AndroidManifest中開啟權限</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>4.在AndroidManifest中定義Service</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">    &lt;service android:name=<span class="string">&quot;.FloatingController.ChatHeadService&quot;</span></span><br><span class="line">        android:exported=<span class="string">&quot;false&quot;</span></span><br><span class="line">        ...</span><br><span class="line">    /&gt;</span><br><span class="line">&lt;/application&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>5.呼叫方法</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showFloatingView(applicationContext, isShowOverlayPermission &#x3D; true, isCustomFloatingView &#x3D; false)</span><br></pre></td></tr></table></div></figure><p>這時會遇到一個特殊權限，叫做「在其他應用程式上層繪製內容」，經由google play認證的app是預設開啟的</p><p>在安卓6(API22)以上才有區分是跟否!!!!sdk需大於安卓6以上(含)才能詢問，不然會報錯</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings.canDrawOverlays(this)   &#x2F;&#x2F;判斷是否可在其他程式上繪製東西</span><br></pre></td></tr></table></div></figure><p>若得到false，需跳轉到設定頁讓使用者手動設定</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(&quot;package:$packageName&quot;))</span><br></pre></td></tr></table></div></figure><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">&quot;NewApi&quot;</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showFloatingView</span><span class="params">(context: <span class="type">Context</span>, isShowOverlayPermission: <span class="type">Boolean</span>, isCustomFloatingView: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// API22以下不需要詢問Settings.canDrawOverlays(context)，詢問會閃退</span></span><br><span class="line">    <span class="comment">//  --&gt;直接開啟下一步</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">        startFloatingViewService(<span class="keyword">this</span>, isCustomFloatingView)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// API22以上先詢問Settings.canDrawOverlays(context)</span></span><br><span class="line">    <span class="keyword">if</span> (Settings.canDrawOverlays(context)) &#123;</span><br><span class="line">        startFloatingViewService(<span class="keyword">this</span>, isCustomFloatingView)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 沒有開啟canDrawOverlays 跳轉到設定讓使用者手動開啟</span></span><br><span class="line">    <span class="keyword">if</span> (isShowOverlayPermission) &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class="string">&quot;package:&quot;</span> + context.packageName))</span><br><span class="line">        startActivityForResult(</span><br><span class="line">            intent,</span><br><span class="line">            <span class="keyword">if</span> (isCustomFloatingView) CUSTOM_OVERLAY_PERMISSION_REQUEST_CODE <span class="keyword">else</span> CHATHEAD_OVERLAY_PERMISSION_REQUEST_CODE</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startFloatingViewService</span><span class="params">(activity: <span class="type">Activity</span>, isCustomFloatingView: <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// *** You must follow these rules when obtain the cutout(FloatingViewManager.findCutoutSafeArea) ***</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) &#123;</span><br><span class="line">        <span class="comment">// 1. &#x27;windowLayoutInDisplayCutoutMode&#x27; do not be set to &#x27;never&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (activity.window.attributes.layoutInDisplayCutoutMode == WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER) &#123;</span><br><span class="line">            <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;&#x27;windowLayoutInDisplayCutoutMode&#x27; do not be set to &#x27;never&#x27;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. Do not set Activity to landscape</span></span><br><span class="line">        <span class="keyword">if</span> (activity.resources.configuration.orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;Do not set Activity to landscape&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// launch service</span></span><br><span class="line">    <span class="keyword">val</span> service: Class&lt;<span class="keyword">out</span> Service&gt;</span><br><span class="line">    <span class="keyword">val</span> key: String</span><br><span class="line">    <span class="keyword">if</span> (isCustomFloatingView) &#123;</span><br><span class="line">        service = CustomFloatingViewService::<span class="keyword">class</span>.java</span><br><span class="line">        key = CustomFloatingViewService.EXTRA_CUTOUT_SAFE_AREA</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        service = ChatHeadService::<span class="keyword">class</span>.java</span><br><span class="line">        key = ChatHeadService.EXTRA_CUTOUT_SAFE_AREA</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(activity, service)</span><br><span class="line">    intent.putExtra(key, FloatingViewManager.findCutoutSafeArea(activity))</span><br><span class="line">    ContextCompat.startForegroundService(activity, intent)</span><br><span class="line">&#125;         </span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-應用技術-View-Floating-浮動-Server"   >          <a href="#tags-應用技術-View-Floating-浮動-Server" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-View-Floating-浮動-Server" class="headerlink" title="tags: 應用技術 View Floating 浮動 Server"></a>tags: <code>應用技術</code> <code>View</code> <code>Floating</code> <code>浮動</code> <code>Server</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日夜間模式DayNight</title>
      <link href="/tutu1023/2021/04/29/%E6%97%A5%E5%A4%9C%E9%96%93%E6%A8%A1%E5%BC%8FDayNight/"/>
      <url>/tutu1023/2021/04/29/%E6%97%A5%E5%A4%9C%E9%96%93%E6%A8%A1%E5%BC%8FDayNight/</url>
      
        <content type="html"><![CDATA[<p>Update：2020/04/15  Code：Kotlin<br>By：Ada</p><p>參考來源：<br><span class="exturl"><a class="exturl__link"   href="https://www.journaldev.com/19352/android-daynight-theme-night-mode" >https://www.journaldev.com/19352/android-daynight-theme-night-mode</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://www.twblogs.net/a/5b8afe592b71773b27ca3b4a" >https://www.twblogs.net/a/5b8afe592b71773b27ca3b4a</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/85ccWBP.png" alt="Imgur"></p><p>實現App內日夜間模式切換，又分為手動以及依照裝置系統NightMode切換</p><hr>        <h3 id="1-更改AppTheme"   >          <a href="#1-更改AppTheme" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-更改AppTheme" class="headerlink" title="1.更改AppTheme"></a>1.更改AppTheme</h3>      <p>將value-&gt;style中App需套用AppTheme的parent改為”Theme.AppCompat.DayNight”或”Theme.AppCompat.DayNight.NoActionBar”</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style name=<span class="string">&quot;AppTheme&quot;</span> parent=<span class="string">&quot;Theme.AppCompat.DayNight.NoActionBar&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;colorPrimary&quot;</span>&gt;<span class="meta">@color</span>/colorPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;colorPrimaryDark&quot;</span>&gt;<span class="meta">@color</span>/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;colorAccent&quot;</span>&gt;<span class="meta">@color</span>/colorAccent&lt;/item&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="2-增加value-night資料夾"   >          <a href="#2-增加value-night資料夾" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-增加value-night資料夾" class="headerlink" title="2.增加value-night資料夾"></a>2.增加value-night資料夾</h3>      <p>複製一value資料夾並命名為value-night，更改value-night中對應數值以及資源</p><p>⬇以colors為例，更改(night)資料夾中的數值，同name不同value</p><p><img src="https://i.imgur.com/2J7eiRF.png" alt="Imgur"></p><p>⬇以drawable為例，覆蓋相同名稱的圖片</p><p><img src="https://i.imgur.com/qQ1FGZs.png" alt="Imgur"></p>        <h3 id="3-建立切換方式"   >          <a href="#3-建立切換方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-建立切換方式" class="headerlink" title="3.建立切換方式"></a>3.建立切換方式</h3>              <h4 id="依照裝置系統NightMode切換-google來的請小心服用"   >          <a href="#依照裝置系統NightMode切換-google來的請小心服用" class="heading-link"><i class="fas fa-link"></i></a><a href="#依照裝置系統NightMode切換-google來的請小心服用" class="headerlink" title="依照裝置系統NightMode切換(google來的請小心服用)"></a>依照裝置系統NightMode切換(google來的請小心服用)</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (getResources().getConfiguration().uiMode &amp; Configuration.UI_MODE_NIGHT_MASK) &#123;</span><br><span class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_YES:</span><br><span class="line">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Configuration.UI_MODE_NIGHT_NO:</span><br><span class="line">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);</span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="手動切換"   >          <a href="#手動切換" class="heading-link"><i class="fas fa-link"></i></a><a href="#手動切換" class="headerlink" title="手動切換"></a>手動切換</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//switch button</span></span><br><span class="line">mineDayNightSwitch.setOnCheckedChangeListener &#123; _, isChecked -&gt;</span><br><span class="line">    saveNightMode(isChecked)<span class="comment">//儲存NightMode以便下次開啟時直接套用</span></span><br><span class="line">    <span class="keyword">if</span>(isChecked)&#123;</span><br><span class="line">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-應用技術-日夜間-DayNight"   >          <a href="#tags-應用技術-日夜間-DayNight" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-日夜間-DayNight" class="headerlink" title="tags: 應用技術 日夜間 DayNight"></a>tags: <code>應用技術</code> <code>日夜間</code> <code>DayNight</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>影片廣告ImaAdsLoader</title>
      <link href="/tutu1023/2021/04/29/%E5%BD%B1%E7%89%87%E5%BB%A3%E5%91%8AImaAdsLoader/"/>
      <url>/tutu1023/2021/04/29/%E5%BD%B1%E7%89%87%E5%BB%A3%E5%91%8AImaAdsLoader/</url>
      
        <content type="html"><![CDATA[<p>  Update：2020/08/17<br>  By：Ada<br>  Code：Kotlin</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side" >https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/EmdMLPg.png" alt="Imgur"></p><p>放置在影片前的影片廣告ImaAdsLoader（本篇適用於Android系統之半官方承認播放器ExoPlayer）</p><hr>        <h4 id="1-build-gradle-app增加依賴"   >          <a href="#1-build-gradle-app增加依賴" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-build-gradle-app增加依賴" class="headerlink" title="1.build.gradle/app增加依賴"></a>1.build.gradle/app增加依賴</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;29.0.2&quot;</span></span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.exoplayer:exoplayer:2.11.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.exoplayer:exoplayer-hls:2.11.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.exoplayer:extension-ima:2.11.1&#x27;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="2-AndroidMenifest增加權限"   >          <a href="#2-AndroidMenifest增加權限" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-AndroidMenifest增加權限" class="headerlink" title="2.AndroidMenifest增加權限"></a>2.AndroidMenifest增加權限</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="3-放置player-view"   >          <a href="#3-放置player-view" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-放置player-view" class="headerlink" title="3.放置player_view"></a>3.放置player_view</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;com.google.android.exoplayer2.ui.PlayerView</span><br><span class="line">    android:id=<span class="string">&quot;@+id/player_view&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="4-在value的string中加入測試用影片及廣告網址"   >          <a href="#4-在value的string中加入測試用影片及廣告網址" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-在value的string中加入測試用影片及廣告網址" class="headerlink" title="4.在value的string中加入測試用影片及廣告網址"></a>4.在value的string中加入測試用影片及廣告網址</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;string name=<span class="string">&quot;content_url&quot;</span>&gt;&lt;![CDATA[https:<span class="comment">//storage.googleapis.com/gvabox/media/samples/stock.mp4]]&gt;&lt;/string&gt;</span></span><br><span class="line">&lt;string name=<span class="string">&quot;ad_tag_url&quot;</span>&gt;&lt;![CDATA[https:<span class="comment">//pubads.g.doubleclick.net/gampad/ads?sz=640x480&amp;iu=/124319096/external/single_ad_samples&amp;ciu_szs=300x250&amp;impl=s&amp;gdfp_req=1&amp;env=vp&amp;output=vast&amp;unviewed_position_start=1&amp;cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&amp;correlator=]]&gt;&lt;/string&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="5-初始化播放器"   >          <a href="#5-初始化播放器" class="heading-link"><i class="fas fa-link"></i></a><a href="#5-初始化播放器" class="headerlink" title="5.初始化播放器"></a>5.初始化播放器</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">simpleExoplayer = SimpleExoPlayer.Builder(<span class="keyword">this</span>).build()</span><br><span class="line">simpleExoplayerView.setPlayer(simpleExoplayer)</span><br><span class="line"></span><br><span class="line">imaAdsLoader = ImaAdsLoader(<span class="keyword">this</span>,Uri.parse(getString(R.string.ad_tag_url)))<span class="comment">//預設廣告網址</span></span><br><span class="line">imaAdsLoader.setPlayer(simpleExoplayer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> defaultDataSourceFactory= DefaultHttpDataSourceFactory(Util.getUserAgent(<span class="keyword">this</span>, <span class="string">&quot;app-name&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> mediaSource = HlsMediaSource.Factory(defaultDataSourceFactory).createMediaSource(Uri.parse(R.string.content_url)) <span class="comment">//預設影片網址</span></span><br><span class="line"><span class="keyword">val</span> adsMediaSource = AdsMediaSource(mediaSource, defaultDataSourceFactory, imaAdsLoader, simpleExoPlayerView)</span><br><span class="line">simpleExoplayer.prepare(adsMediaSource)</span><br><span class="line">simpleExoplayer.seekTo(<span class="number">0L</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="6-記得在onDestroy把廣告釋放掉"   >          <a href="#6-記得在onDestroy把廣告釋放掉" class="heading-link"><i class="fas fa-link"></i></a><a href="#6-記得在onDestroy把廣告釋放掉" class="headerlink" title="6.記得在onDestroy把廣告釋放掉"></a>6.記得在onDestroy把廣告釋放掉</h4>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//清除廣告的快取</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    imaAdsLoader.release()</span><br><span class="line">&#125;<span class="keyword">catch</span> (e:Exception)&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>Do Re Mi So ~ ~ 這樣就大功告成了<br>至於怎麼樣將廣告平均分配在影片中，還沒有研究出來😂</p>        <h6 id="tags-應用技術-Video-ImaAdsLoader-ExoPlayer-廣告"   >          <a href="#tags-應用技術-Video-ImaAdsLoader-ExoPlayer-廣告" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-Video-ImaAdsLoader-ExoPlayer-廣告" class="headerlink" title="tags: 應用技術 Video ImaAdsLoader ExoPlayer 廣告"></a>tags: <code>應用技術</code> <code>Video</code> <code>ImaAdsLoader</code> <code>ExoPlayer</code> <code>廣告</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>資料庫Room</title>
      <link href="/tutu1023/2021/04/29/%E8%B3%87%E6%96%99%E5%BA%ABRoom/"/>
      <url>/tutu1023/2021/04/29/%E8%B3%87%E6%96%99%E5%BA%ABRoom/</url>
      
        <content type="html"><![CDATA[<p>  Update：2019/12/12<br>  Code：Kotlin<br>  By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://medium.com/jastzeonic/kotlin-room-%E4%BD%BF%E7%94%A8%E5%88%9D%E9%AB%94%E9%A9%97-f3af4f8ddc80" >https://medium.com/jastzeonic/kotlin-room-%E4%BD%BF%E7%94%A8%E5%88%9D%E9%AB%94%E9%A9%97-f3af4f8ddc80</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>1.導入依賴</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;androidx.room:room-runtime:2.2.2&#x27;</span></span><br><span class="line">    kapt <span class="string">&#x27;androidx.room:room-compiler:2.2.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>2.建立 Room 的 Entities(key值、欄位的部分)，設定table名稱</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity(tableName = FavoModel.TABLE_NAME)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FavoModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> TABLE_NAME = <span class="string">&quot;favorite&quot;</span>    <span class="comment">//設定Table名稱</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PrimaryKey(autoGenerate = true)</span>    <span class="comment">//欄位</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">&quot;timestamp&quot;</span>, typeAffinity = ColumnInfo.TEXT)</span></span><br><span class="line">    <span class="keyword">var</span> time = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="keyword">var</span> ignoreText = <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>3.建立 Dao interface，包含</p><ul><li>  <a href="#GetAll">GetAll</a></li><li>  <a href="#QueryById">QueryById</a></li><li>  <a href="#Insert">Insert</a></li><li>  <a href="#Update">Update</a></li><li>  <a href="#Delete">Delete</a></li></ul><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FavoDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">&quot;select * from &quot;</span> + FavoModel.TABLE_NAME + <span class="meta-string">&quot; order by timestamp DESC&quot;</span>)</span>   </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAll</span><span class="params">()</span></span>: List&lt;FavoModel&gt;                                               　 </span><br><span class="line">                                            <span class="comment">//timestamp from 2.Entities @ColumnInfo(新增/更新時以item.time來記錄)</span></span><br><span class="line">                                            <span class="comment">//ASC小到大排序 DESC大到小排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">&quot;select * from &quot;</span> + FavoModel.TABLE_NAME + <span class="meta-string">&quot; where id LIKE :id LIMIT 1&quot;</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queryById</span><span class="params">(id: <span class="type">Int</span>)</span></span>: FavoModel</span><br><span class="line">                                            <span class="comment">//當id = 所需 id 且限制取一筆</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insert</span><span class="params">(item: <span class="type">FavoModel</span>)</span></span>:<span class="built_in">Long</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(item: <span class="type">FavoModel</span>)</span></span>:<span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(item: <span class="type">FavoModel</span>)</span></span>:<span class="built_in">Int</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>4.需要建立一個標示 Database 以及繼承 RoomDatabase 的抽象型別</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(entities = [(FavoModel::class)</span>], version = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> DATABASE_NAME = <span class="string">&quot;database&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTodoDao</span><span class="params">()</span></span>: FavoDao</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>5.如有多張Table，創建專屬的Model與Dao，並在DataBase中，加入entities欄位以及getDao方法</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(entities = [(FavoModel::class)</span>,(FollowModel::<span class="class"><span class="keyword">class</span>),<span class="type"></span></span>(RecordModel::<span class="class"><span class="keyword">class</span>)], <span class="type">version = 1)</span></span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> DATABASE_NAME = <span class="string">&quot;database&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getFavoDao</span><span class="params">()</span></span>: FavoDao</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getFollowDao</span><span class="params">()</span></span>: FollowDao</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getRecordDao</span><span class="params">()</span></span>: RecordDao</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>6.若新版本需要新增table或更改表單欄位，DataBase中的version需加1，並添加migration方法。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Database(entities = [(FavoModel::class)</span>,(FollowModel::<span class="class"><span class="keyword">class</span>),<span class="type"></span></span>(RecordModel::<span class="class"><span class="keyword">class</span>)], <span class="type">version = 2)</span></span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> DATABASE_NAME = <span class="string">&quot;database&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">val</span> MIGRATION_1_2 = <span class="keyword">object</span> : Migration(<span class="number">1</span>, <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">migrate</span><span class="params">(database: <span class="type">SupportSQLiteDatabase</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">val</span> tableName = TodoModel.TABLE_NAME</span><br><span class="line">                database.execSQL(<span class="string">&quot;ALTER TABLE <span class="variable">$tableName</span> ADD COLUMN imageUrl TEXT NOT NULL DEFAULT &#x27;&#x27;&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getFavoDao</span><span class="params">()</span></span>: FavoDao</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getFollowDao</span><span class="params">()</span></span>: FollowDao</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">getRecordDao</span><span class="params">()</span></span>: RecordDao</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>在呼叫時也需要一個addMigration的方法。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">AsyncTask.execute(&#123;</span><br><span class="line">    todoDatabase = Room.databaseBuilder(applicationContext, TodoDatabase::<span class="keyword">class</span>.java, TodoDatabase.DATABASE_NAME)</span><br><span class="line">        .addMigrations(TodoDatabase.MIGRATION_1_2)</span><br><span class="line">        .build()</span><br><span class="line">    todoDao = todoDatabase.getTodoDao()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><hr>        <h1 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法" class="headerlink" title="方法"></a>方法</h1>      <p>資料庫無法在UI Thread上執行，所以需要用AsyncTask.execute包起來。用完記得要把資料庫關閉，有些機型對於資料庫重複開啟未關閉會造成系統吃不消。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AsyncTask.execute(&#123;</span><br><span class="line">    <span class="keyword">val</span> todoDatabase = Room.databaseBuilder(applicationContext, TodoDatabase::<span class="keyword">class</span>.java, TodoDatabase.DATABASE_NAME)</span><br><span class="line">        .allowMainThreadQueries()</span><br><span class="line">        .build()</span><br><span class="line">    <span class="keyword">val</span> todoDao = todoDatabase.getTodoDao()</span><br><span class="line">    <span class="keyword">val</span> allTodoList = todoDao.getAll()</span><br><span class="line">    <span class="comment">//getAll()方法只能抓到位置</span></span><br><span class="line">    </span><br><span class="line">    todoDatabase.close()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>        <h3 id="GetAll"   >          <a href="#GetAll" class="heading-link"><i class="fas fa-link"></i></a>GetAll_獲取列表</h3>      <p><strong>get列表size</strong>：todoDatabase.getTodoDao().getAll().size<br><strong>get列表[0]的id值</strong>：todoDatabase.getTodoDao().getAll()[0].id</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">AsyncTask.execute &#123;</span><br><span class="line">    <span class="keyword">val</span> todoDatabase = Room.databaseBuilder(applicationContext, TodoDatabase::<span class="keyword">class</span>.java, TodoDatabase.DATABASE_NAME)</span><br><span class="line">        .build()</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">0</span> until todoDatabase.getTodoDao().getAll().size)&#123;</span><br><span class="line">        <span class="keyword">val</span> tempArray:MutableMap&lt;String,String&gt; = mutableMapOf()</span><br><span class="line">        tempArray[<span class="string">&quot;vid&quot;</span>] = todoDatabase.getTodoDao().getAll()[i].id.toString()</span><br><span class="line">        tempArray[<span class="string">&quot;name&quot;</span>] = todoDatabase.getTodoDao().getAll()[i].name</span><br><span class="line">        ...</span><br><span class="line">        collect.add(tempArray)</span><br><span class="line">    &#125;</span><br><span class="line">    activity!!.runOnUiThread &#123;</span><br><span class="line">        mAdapter.setNewData(collect)</span><br><span class="line">        mAdapter.notifyDataSetChanged()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="QueryById"   >          <a href="#QueryById" class="heading-link"><i class="fas fa-link"></i></a>QueryById_搜尋項目</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(todoDatabase.getTodoDao().queryById(id)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">//資料存在</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//資料不存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="Insert"   >          <a href="#Insert" class="heading-link"><i class="fas fa-link"></i></a>Insert_插入項目</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> item = FavoModel()</span><br><span class="line">item.id=vid</span><br><span class="line">item.name=name</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">todoDatabase.getTodoDao().insert(item)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="Update"   >          <a href="#Update" class="heading-link"><i class="fas fa-link"></i></a>Update_更新項目</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AsyncTask.execute &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> todoDatabase = Room.databaseBuilder(applicationContext, TodoDatabase::<span class="keyword">class</span>.java, TodoDatabase.DATABASE_NAME)</span><br><span class="line">        .build()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(todoDatabase.getTodoDao().queryById(id)!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">val</span> item = todoDatabase.getTodoDao().queryById(id)</span><br><span class="line">        item.name = newName</span><br><span class="line">        item.imageUrl = newImageUrl</span><br><span class="line">        todoDatabase.getTodoDao().update(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="Delete"   >          <a href="#Delete" class="heading-link"><i class="fas fa-link"></i></a>Delete_刪除項目</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AsyncTask.execute &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> todoDatabase = Room.databaseBuilder(applicationContext, TodoDatabase::<span class="keyword">class</span>.java, TodoDatabase.DATABASE_NAME)</span><br><span class="line">        .build()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(todoDatabase.getTodoDao().queryById(id)!=<span class="literal">null</span>)&#123;</span><br><span class="line">        todoDatabase.getTodoDao().delete(todoDatabase.getTodoDao().queryById(id))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//刪到不存在的資料會閃退</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><hr>        <h1 id="遇到問題"   >          <a href="#遇到問題" class="heading-link"><i class="fas fa-link"></i></a><a href="#遇到問題" class="headerlink" title="遇到問題"></a>遇到問題</h1>      <p><img src="https://i.imgur.com/xcBo8Yx.png" alt="Imgur"></p><p>以上原因均是因為資料庫在使用之後沒有做.close()的動作，多次開啟造成內存不足</p>        <h6 id="tags-應用技術-Database-Room-資料庫"   >          <a href="#tags-應用技術-Database-Room-資料庫" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-Database-Room-資料庫" class="headerlink" title="tags: 應用技術 Database Room 資料庫"></a>tags: <code>應用技術</code> <code>Database</code> <code>Room</code> <code>資料庫</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>遠程配置RemoteConfig(Firebase)</title>
      <link href="/tutu1023/2021/04/29/%E9%81%A0%E7%A8%8B%E9%85%8D%E7%BD%AERemoteConfig(Firebase)/"/>
      <url>/tutu1023/2021/04/29/%E9%81%A0%E7%A8%8B%E9%85%8D%E7%BD%AERemoteConfig(Firebase)/</url>
      
        <content type="html"><![CDATA[<p>Update：2020/04/15  Code：Kotlin<br>By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://firebase.google.com/docs/remote-config/use-config-android" >https://firebase.google.com/docs/remote-config/use-config-android</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/3oUZ37n.png" alt="Imgur"></p><p>利用Firebase的Config功能，幫助我們在未更新新版本的情況下更改App中的配置。</p><hr>        <h3 id="1-導入依賴"   >          <a href="#1-導入依賴" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-導入依賴" class="headerlink" title="1.導入依賴"></a>1.導入依賴</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">implementation <span class="string">&#x27;com.google.firebase:firebase-config-ktx:19.1.3&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="2-建立RemoteConfig以及設定ConfigSetting"   >          <a href="#2-建立RemoteConfig以及設定ConfigSetting" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-建立RemoteConfig以及設定ConfigSetting" class="headerlink" title="2.建立RemoteConfig以及設定ConfigSetting"></a>2.建立RemoteConfig以及設定ConfigSetting</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> remoteConfig = FirebaseRemoteConfig.getInstance()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> firebaseRemoteConfigSettings =</span><br><span class="line">    FirebaseRemoteConfigSettings.Builder().apply &#123;</span><br><span class="line">        setDeveloperModeEnabled(<span class="literal">true</span>)</span><br><span class="line">    &#125;.build()</span><br><span class="line">    </span><br><span class="line">remoteConfig.setConfigSettings(firebaseRemoteConfigSettings)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="3-設定預設值-以防沒有成功抓取Config值"   >          <a href="#3-設定預設值-以防沒有成功抓取Config值" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-設定預設值-以防沒有成功抓取Config值" class="headerlink" title="3.設定預設值(以防沒有成功抓取Config值)"></a>3.設定預設值(以防沒有成功抓取Config值)</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">remoteConfig.setDefaults(R.xml.remote_config_default)<span class="comment">//預設結果</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//remote_config_default.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;defaultsMap&gt;</span><br><span class="line">    &lt;entry&gt;</span><br><span class="line">        &lt;key&gt;hello_text&lt;/key&gt;</span><br><span class="line">        &lt;value&gt;Hello default&lt;/value&gt;</span><br><span class="line">    &lt;/entry&gt;</span><br><span class="line">    &lt;entry&gt;</span><br><span class="line">        &lt;key&gt;...&lt;/key&gt;</span><br><span class="line">        &lt;value&gt;...&lt;/value&gt;</span><br><span class="line">    &lt;/entry&gt;</span><br><span class="line">&lt;/defaultsMap&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="4-設定刷新時間並且送出請求"   >          <a href="#4-設定刷新時間並且送出請求" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-設定刷新時間並且送出請求" class="headerlink" title="4.設定刷新時間並且送出請求"></a>4.設定刷新時間並且送出請求</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// cache刷新時間，單位是秒</span></span><br><span class="line"><span class="keyword">var</span> cacheExpiration = <span class="number">3600L</span></span><br><span class="line"><span class="keyword">if</span> (remoteConfig.info.configSettings.isDeveloperModeEnabled) &#123;</span><br><span class="line">    cacheExpiration = <span class="number">0L</span></span><br><span class="line">&#125;</span><br><span class="line">remoteConfig.fetch(cacheExpiration)</span><br><span class="line">    .addOnCompleteListener(<span class="keyword">this</span>) &#123; task -&gt;</span><br><span class="line">        <span class="keyword">if</span> (task.isSuccessful) &#123;</span><br><span class="line">            <span class="keyword">val</span> updated = remoteConfig.activate()</span><br><span class="line">            Log.d(<span class="string">&quot;remoteConfigResponse&quot;</span>,<span class="string">&quot;update -&gt; <span class="variable">$update</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        displayWelcomeMessage()<span class="comment">//要執行的東西</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-工具教學-Firebase-Remote"   >          <a href="#tags-工具教學-Firebase-Remote" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-工具教學-Firebase-Remote" class="headerlink" title="tags: 工具教學 Firebase Remote"></a>tags: <code>工具教學</code> <code>Firebase</code> <code>Remote</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Exo播放器ExoPlayer</title>
      <link href="/tutu1023/2021/04/29/Exo%E6%92%AD%E6%94%BE%E5%99%A8ExoPlayer/"/>
      <url>/tutu1023/2021/04/29/Exo%E6%92%AD%E6%94%BE%E5%99%A8ExoPlayer/</url>
      
        <content type="html"><![CDATA[<p>  Update：2020/11/16<br>  By：Ada<br>  Code：Kotlin</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://medium.com/@tabacowang/%E4%BD%BF%E7%94%A8exoplayer%E6%92%AD%E6%94%BE%E5%99%A8%E6%92%AD%E6%94%BE%E5%BD%B1%E7%89%87-e8cdd27e24e2" >https://medium.com/@tabacowang/%E4%BD%BF%E7%94%A8exoplayer%E6%92%AD%E6%94%BE%E5%99%A8%E6%92%AD%E6%94%BE%E5%BD%B1%E7%89%87-e8cdd27e24e2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://www.jazzcoding.com/wp-content/uploads/2020/05/exoplayer.png" alt="截圖 2020-11-16 下午5.40.01.png"></p><p>使用Android系統之半官方承認播放器ExoPlayer</p><p><a href="#Activity">Activity</a></p><p><a href="#Fragment">Fragment</a></p><hr>        <h2 id="Activity"   >          <a href="#Activity" class="heading-link"><i class="fas fa-link"></i></a>Activity方法</h2>      <hr>        <h2 id="Fragment"   >          <a href="#Fragment" class="heading-link"><i class="fas fa-link"></i></a>Fragment方法</h2>      <hr>        <h3 id="Android-11適配與FragmentX解決辦法"   >          <a href="#Android-11適配與FragmentX解決辦法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Android-11適配與FragmentX解決辦法" class="headerlink" title="Android 11適配與FragmentX解決辦法"></a>Android 11適配與FragmentX解決辦法</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://qiita.com/iKimishima/items/36ed4cc3595fa1cf1fb9" >https://qiita.com/iKimishima/items/36ed4cc3595fa1cf1fb9</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h6 id="tags-應用技術-Video-ExoPlayer"   >          <a href="#tags-應用技術-Video-ExoPlayer" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-Video-ExoPlayer" class="headerlink" title="tags: 應用技術 Video ExoPlayer"></a>tags: <code>應用技術</code> <code>Video</code> <code>ExoPlayer</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>直播串流M3U8</title>
      <link href="/tutu1023/2021/04/29/%E7%9B%B4%E6%92%AD%E4%B8%B2%E6%B5%81/"/>
      <url>/tutu1023/2021/04/29/%E7%9B%B4%E6%92%AD%E4%B8%B2%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>  Update：2021/01/21<br>  By：Ada</p><p>資料來源：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://www.itread01.com/content/1550627461.html" >直播原理—-協議</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>   </li><li><span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/rsapaper/p/9807816.html" >视频流协议HLS与RTMP 直播原理 点播原理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>    </li><li><span class="exturl"><a class="exturl__link"   href="https://cloud.tencent.com/developer/news/122941" >科普！直播中常說的推流拉流究竟是什麼東東？</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><p>目錄：</p><p>[TOC]</p><hr>        <h2 id="直播流程圖"   >          <a href="#直播流程圖" class="heading-link"><i class="fas fa-link"></i></a><a href="#直播流程圖" class="headerlink" title="直播流程圖"></a>直播流程圖</h2>      <p><img src="https://i.imgur.com/Uwhqp94.png" alt="Imgur"></p>        <h2 id="推流、拉流與CDN"   >          <a href="#推流、拉流與CDN" class="heading-link"><i class="fas fa-link"></i></a><a href="#推流、拉流與CDN" class="headerlink" title="推流、拉流與CDN"></a>推流、拉流與CDN</h2>      <ul><li><p>推流：把採集階段封包好的内容傳輸到服務器的過程。其實就是將現場的視頻信號傳到網路的過程。“推流”對網路要求比較高，如果網路不穩定，直播效果就會很差，觀眾觀看直播時就會發生卡頓等現象，觀看體驗很是糟糕。</p></li><li><p>拉流：指服務器已有直播內容，根據協議類型（如RTMP、RTP、RTSP、HTTP等），與服務器建立連接並接收數據，進行拉取的過程。拉流端的核心處理在播放器端的解碼和渲染，在互動直播中還需集成聊天室、點贊和禮物系統等功能。</p></li><li><p>CDN：全稱為Content Delivery Network，是一個策略性部署的整體系統，主要用來解決由於網絡帶寬小、用戶訪問量大、網點分布不均勻等導致用戶訪問網站速度慢的問題。</p></li></ul><p><img src="https://i.imgur.com/X3D1btY.png" alt="Imgur"></p><hr>        <h1 id="協議"   >          <a href="#協議" class="heading-link"><i class="fas fa-link"></i></a><a href="#協議" class="headerlink" title="協議"></a>協議</h1>              <h2 id="HLS"   >          <a href="#HLS" class="heading-link"><i class="fas fa-link"></i></a><a href="#HLS" class="headerlink" title="HLS"></a>HLS</h2>      <p>HTTP Live Streaming（簡稱 HLS）是一個基於 HTTP 的視頻協議，由 Apple 公司實現，Mac OS 上的 QuickTime、Safari 以及 iOS 上的 Safari 都能很好的支持 HLS，高版本 Android 也增加了對 HLS 的支持。</p><p>HLS 協議基於 HTTP，而一個提供 HLS 的服務器需要做两件事：</p><ul><li>編碼：以 H.263 格式對圖像進行編碼，以 MP3 或者 HE-AAC 對聲音進行編碼，最終打包到 MPEG-2 TS（Transport Stream）容器之中；</li><li>分割：把編碼好的 TS 文件等長切分成 .ts 的小文件來對應hls格式，並生成一個 .m3u8 的純文本索引文件；</li></ul><p>工作原理圖如下：</p><p><img src="https://i.imgur.com/H8qpsSY.png" alt="Imgur"></p><p>HLS 協議本質還是一個個 HTTP 請求，所以適應性很好，不會受到防火墙影響。但它也有一個致命的弱點：延遲現象非常明顯。</p><p>如果每個 ts 按照 5 秒來切分，一個 m3u8 放 4 個 .ts 索引 ，那麽至少就会帶來 20 秒的延遲。如果減少每個 .ts 的長度，減少 m3u8 中的索引数，延遲確實會減少，但會帶来更頻繁的緩衝，對服務端的請求壓力也會成倍增加。所以只能根據實際情況找到一個折衷的點。</p><p>以圖奇為例：一個.ts的時長為2秒，一M3U8檔內含有8個.ts檔，延遲時間大約就是16秒。</p>        <h2 id="RTMP"   >          <a href="#RTMP" class="heading-link"><i class="fas fa-link"></i></a><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h2>      <p>Real Time Messaging Protocol（簡稱 RTMP）是 Macromedia 開發的一套視頻直播協議，現在屬於 Adobe。這套方案需要搭建專門的 RTMP 流媒體服務如 Adobe Media Server，並且在瀏覽器中只能使用 Flash 實現播放器。它的實時性非常好，延遲很小，但無法支持移動端 WEB 播放是它的硬傷。主要用來在Flash、AIR平臺和支援RTMP協議的流媒體/互動伺服器之間進行音訊和資料通訊。傳統的軟體跟伺服器之間的互動，還是用rtmp協議為主。傳輸的視訊格式為flv，即為“.flv”形式。</p><p>瀏覽器端，HTML5 video標籤無法播放 RTMP 協議的視頻，可以通過 video.js 來實現。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href&#x3D;&quot;http:&#x2F;&#x2F;vjs.zencdn.net&#x2F;5.8.8&#x2F;video-js.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"> </span><br><span class="line">&lt;video id&#x3D;&quot;example_video_1&quot; class&#x3D;&quot;video-js vjs-default-skin&quot; controls preload&#x3D;&quot;auto&quot; width&#x3D;&quot;640&quot; height&#x3D;&quot;264&quot; loop&#x3D;&quot;loop&quot; webkit-playsinline&gt;</span><br><span class="line">&lt;source src&#x3D;&quot;rtmp:&#x2F;&#x2F;10.14.221.17:1935&#x2F;rtmplive&#x2F;home&quot; type&#x3D;&#39;rtmp&#x2F;flv&#39;&gt;</span><br><span class="line">&lt;&#x2F;video&gt;</span><br><span class="line"> </span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;vjs.zencdn.net&#x2F;5.8.8&#x2F;video.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">videojs.options.flash.swf &#x3D; &#39;video.swf&#39;;</span><br><span class="line">videojs(&#39;example_video_1&#39;).ready(function() &#123;</span><br><span class="line">this.play();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></div></figure><link href="http://vjs.zencdn.net/5.8.8/video-js.css" rel="stylesheet"> <video id="example_video_1" class="video-js vjs-default-skin" controls preload="auto" width="640" height="264" loop="loop" webkit-playsinline><source src="rtmp://10.14.221.17:1935/rtmplive/home" type='rtmp/flv'></video> <script src="http://vjs.zencdn.net/5.8.8/video.js"></script><script>videojs.options.flash.swf = 'video.swf';videojs('example_video_1').ready(function() {this.play();});</script>        <h2 id="HLS-V-S-RTMP"   >          <a href="#HLS-V-S-RTMP" class="heading-link"><i class="fas fa-link"></i></a><a href="#HLS-V-S-RTMP" class="headerlink" title="HLS V.S. RTMP"></a>HLS V.S. RTMP</h2>      <p><img src="https://i.imgur.com/157KKNb.png" alt="Imgur"></p>        <h2 id="HTTP-FLV"   >          <a href="#HTTP-FLV" class="heading-link"><i class="fas fa-link"></i></a><a href="#HTTP-FLV" class="headerlink" title="HTTP-FLV"></a>HTTP-FLV</h2>      <p>HTTP-FLV可理解為RTMP的升級版本，傳輸的視訊格式同rtmp一樣為flv格式。</p><p>HTTP-FLV結合了HLS的優點，採用HTTP請求，又結合了RTMP低延時的特性，因為中間建立了FLV的長連線，中間通訊過程相對RTMP協議就不再複雜。相對RTMP協議來說，其優點可總結為：</p><ol><li><p>可以在一定程度上避免防火牆的干擾（例如，有的機房只允許80埠通過）</p></li><li><p>可以很好的相容HTTP302跳轉，做到靈活排程</p></li><li><p>可以使用HTTPS做加密通道</p></li><li><p>很好的支援移動端</p></li></ol>        <h1 id="M3U8介紹"   >          <a href="#M3U8介紹" class="heading-link"><i class="fas fa-link"></i></a><a href="#M3U8介紹" class="headerlink" title="M3U8介紹"></a>M3U8介紹</h1>      <p>以hls協議來說，它會首先發放一個m3u8索引檔案，video在一般瀏覽器中不支援m3u8檔案的識別，safari中可以。video拿到m3u8檔案，它會對其進行解析，解析的內容就為圖中所示的m3u8中的segment.ts檔案，每一個片段即為直播流的分段。</p><p><img src="https://i.imgur.com/H8qpsSY.png" alt="Imgur"></p><p>直播是實時的，所以m3u8檔案肯定不會是固定的，給的m3u8檔案只是當前時間段的索引，segment.ts都會有個時長，在segment總時長之前，video會重新向伺服器請求m3u8檔案，這是瀏覽器自身的行為，此時，伺服器會返回新的m3u8檔案，更新後的segment.ts檔案將會改變，可能是2345或者34567等等。</p><p><img src="https://i.imgur.com/1gML9lL.png" alt="Imgur"></p><p>另外，m3u8檔案結構並不一定全是由ts檔案組成，有可能會巢狀一層m3u8檔案，如下所示：</p><p><img src="https://i.imgur.com/Y88cGhA.png" alt="Imgur"></p><p>如果m3u8檔案中包含m3u8檔案，就對應的是master playlist，如果拿到的m3u8檔案裡只包含ts檔案，那就對應的是media playlists。</p><p>一個典型的 master playlist 文件格式如下：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=200000</span><br><span class="line">gear1/prog_index.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=311111</span><br><span class="line">gear2/prog_index.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=484444</span><br><span class="line">gear3/prog_index.m3u8</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=737777</span><br><span class="line">gear4/prog_index.m3u8</span><br></pre></td></tr></table></div></figure><p>media playlists：</p><figure class="highlight xml"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">＃EXTM3U</span><br><span class="line">＃EXT-X-VERSION：3</span><br><span class="line">＃EXT-X-MEDIA-SEQUENCE：30508</span><br><span class="line">＃EXT-X-TARGETDURATION：5 </span><br><span class="line">#EXTINF：4.972，</span><br><span class="line">https://6.mms.vlog.xuite.net/hls/ftvtv/30508.ts </span><br><span class="line">#EXTINF：4.437，</span><br><span class="line">https：//6.mms .vlog.xuite.net / hls / ftvtv / 30509.ts </span><br><span class="line">#EXTINF：4.306，</span><br><span class="line">https://6.mms.vlog.xuite.net/hls/ftvtv/30510.ts</span><br></pre></td></tr></table></div></figure><hr>        <h1 id="實作"   >          <a href="#實作" class="heading-link"><i class="fas fa-link"></i></a><a href="#實作" class="headerlink" title="實作"></a>實作</h1>              <h2 id="M3U8解析"   >          <a href="#M3U8解析" class="heading-link"><i class="fas fa-link"></i></a><a href="#M3U8解析" class="headerlink" title="M3U8解析"></a>M3U8解析</h2>      <p>所接收的文件格式如下：</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-TWITCH-INFO:NODE=<span class="string">&quot;video-edge-d59628...(以下省略)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=&quot;</span>chunked<span class="string">&quot;,NAME=&quot;</span>1080p60 (source)<span class="string">&quot;,AUTOSELECT=YES,DEFAULT=YES</span></span><br><span class="line"><span class="string">#EXT-X-STREAM-INF:BANDWIDTH=9007387,RESOLUTION=1920x1080,CODECS=&quot;</span>avc1.64002A,mp4a<span class="number">.40</span><span class="number">.2</span><span class="string">&quot;,VIDEO=&quot;</span>chunked<span class="string">&quot;</span></span><br><span class="line"><span class="string">https://video-...g0fYI.m3u8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=&quot;</span>720p60<span class="string">&quot;,NAME=&quot;</span>720p60<span class="string">&quot;,AUTOSELECT=YES,DEFAULT=YES</span></span><br><span class="line"><span class="string">#EXT-X-STREAM-INF:BANDWIDTH=3425658,RESOLUTION=1280x720,CODECS=&quot;</span>avc1.4D401F,mp4a<span class="number">.40</span><span class="number">.2</span><span class="string">&quot;,VIDEO=&quot;</span>720p60<span class="string">&quot;</span></span><br><span class="line"><span class="string">https://video-...UVodQ.m3u8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#EXT-X-MEDIA:TYPE=VIDEO,GROUP-ID=&quot;</span>720p30<span class="string">&quot;,NAME=&quot;</span>720p<span class="string">&quot;,AUTOSELECT=YES,DEFAULT=YES</span></span><br><span class="line"><span class="string">#EXT-X-STREAM-INF:BANDWIDTH=2375658,RESOLUTION=1280x720,CODECS=&quot;</span>avc1.4D401F,mp4a<span class="number">.40</span><span class="number">.2</span><span class="string">&quot;,VIDEO=&quot;</span>720p30<span class="string">&quot;</span></span><br><span class="line"><span class="string">https://video-...bTobg.m3u8</span></span><br></pre></td></tr></table></div></figure><p>求取每個畫質的M3U8檔以及所對應的畫質名稱、fps（禎數）</p><ul><li>1080p 60fps <span class="exturl"><a class="exturl__link"   href="https://video-...g0fyi.m3u8/" >https://video-...g0fYI.m3u8</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>720p  60fps <span class="exturl"><a class="exturl__link"   href="https://video-...uvodq.m3u8/" >https://video-...UVodQ.m3u8</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li>720p  30fps <span class="exturl"><a class="exturl__link"   href="https://video-...btobg.m3u8/" >https://video-...bTobg.m3u8</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(URL(path).openStream()))</span><br><span class="line">                        </span><br><span class="line"><span class="keyword">while</span> (bufferedReader.readLine().also &#123; eachLine = it &#125; != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (eachLine!!.contains(<span class="string">&quot;EXT&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (eachLine!!.contains(<span class="string">&quot;NAME&quot;</span>)) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//將MEDIA-INFO以 , 區隔成一陣列</span></span><br><span class="line">            <span class="keyword">val</span> tempLines =eachLine!!.split(<span class="string">&quot;,&quot;</span>).toTypedArray() </span><br><span class="line">            <span class="keyword">for</span> (tempLine <span class="keyword">in</span> tempLines) &#123;</span><br><span class="line">                <span class="comment">//找到NAME=&quot;&quot;</span></span><br><span class="line">                <span class="keyword">if</span> (tempLine.contains(<span class="string">&quot;NAME&quot;</span>)) &#123;  </span><br><span class="line">                </span><br><span class="line">                    <span class="comment">//提取NAME=&quot;&quot;中的資料</span></span><br><span class="line">                    <span class="keyword">val</span> regexCode = Regex(pattern = <span class="string">&quot;\&quot;(.*?)\&quot;&quot;</span>).find(input = tempLine)?.value  </span><br><span class="line">                    <span class="comment">//去掉“”</span></span><br><span class="line">                    <span class="keyword">val</span> result = regexCode?.let &#123; Regex(<span class="string">&quot;\&quot;&quot;</span>).replace(it, <span class="string">&quot;&quot;</span>) &#125;     </span><br><span class="line">                    <span class="comment">//720p30 以p來區分畫質及禎數</span></span><br><span class="line">                    <span class="keyword">val</span> tempRESOLUTIONs = result!!.split(<span class="string">&quot;p&quot;</span>).toTypedArray()       </span><br><span class="line">                    qualityNames.add(tempRESOLUTIONs[<span class="number">0</span>] + <span class="string">&quot;p&quot;</span>)            </span><br><span class="line">                    qualityFps.add(tempRESOLUTIONs[<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//非EXT開頭➡️網址https</span></span><br><span class="line">        qualityUrls.add(eachLine!!)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bufferedReader.close()</span><br></pre></td></tr></table></div></figure><p>對於M3U8的解析，這個解法是參照前人所留下的code，將資料分成三個陣列。</p><p>分別為qualityNames畫質名稱、qualityFps畫質禎數、qualityUrls畫質網址，以按照順序的方式逐步存取。利用相同位置的特性去相互對照以取得資料。</p><figure class="highlight q"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qualityNames：<span class="number">1080</span>p、<span class="number">720</span>p、<span class="number">720</span>p</span><br><span class="line">qualityFps：<span class="number">60</span>、<span class="number">60</span>、<span class="number">30</span></span><br><span class="line">qualityUrls：https:<span class="comment">//video-...g0fYI.m3u8、https://video-...UVodQ.m3u8、https://video-...bTobg.m3u8</span></span><br></pre></td></tr></table></div></figure>        <h2 id="下一步目標"   >          <a href="#下一步目標" class="heading-link"><i class="fas fa-link"></i></a><a href="#下一步目標" class="headerlink" title="下一步目標"></a>下一步目標</h2>      <p>將M3U8解析流程另外拉出一類別進行運算，再返回一資料類別Quality</p><figure class="highlight q"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data class Quality(</span><br><span class="line">    val name: String,</span><br><span class="line">    val fps: String,</span><br><span class="line">    val url: String,</span><br><span class="line">)</span><br></pre></td></tr></table></div></figure><p>目的是為了分工合作減少活動頁運算負擔，以及資料提取便利性。</p>        <h2 id="回饋"   >          <a href="#回饋" class="heading-link"><i class="fas fa-link"></i></a><a href="#回饋" class="headerlink" title="回饋"></a>回饋</h2>      <ol><li>M3U8應有parser可以使用</li><li>數據類Quality應更名為Source</li><li>MP4與M3U8的差別以及M3U8被廣泛使用的原因</li><li>Network Profiler檢查網絡流量：<span class="exturl"><a class="exturl__link"   href="https://developer.android.com/studio/profile/network-profiler" >https://developer.android.com/studio/profile/network-profiler</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ol>        <h6 id="tags-技術分享-直播串流-Video-M3U8"   >          <a href="#tags-技術分享-直播串流-Video-M3U8" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-技術分享-直播串流-Video-M3U8" class="headerlink" title="tags: 技術分享 直播串流 Video M3U8"></a>tags: <code>技術分享</code> <code>直播串流</code> <code>Video</code> <code>M3U8</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chromecast原理</title>
      <link href="/tutu1023/2021/04/29/Chromecast/"/>
      <url>/tutu1023/2021/04/29/Chromecast/</url>
      
        <content type="html"><![CDATA[<p>  Update：2021/04/07<br>  By：Ada</p><p>資料來源：</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://medium.com/@givemepass/chromecast-%E5%9F%BA%E7%A4%8E%E6%95%99%E5%AD%B8-c1dc0be94af2" >Chromecast 基礎教學</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>   </li><li><span class="exturl"><a class="exturl__link"   href="http://cappella-twilightzone.blogspot.com/2018/06/google-cast.html" >Google Cast 大致工作原理</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>    </li><li><span class="exturl"><a class="exturl__link"   href="https://www.pigo.idv.tw/archives/2487" >談談 GoogleCast (ChromeCast)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://medium.com/@quentin7b/make-your-android-app-compatible-with-your-chromecast-ca751294c4e2" >Make your Android app compatible with your Chromecast</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><p>目錄：</p><p>[TOC]</p><hr>        <h2 id="ChromeCast淺談"   >          <a href="#ChromeCast淺談" class="heading-link"><i class="fas fa-link"></i></a><a href="#ChromeCast淺談" class="headerlink" title="ChromeCast淺談"></a>ChromeCast淺談</h2>      <p>Chromecast 的運作原理與 Miracast 這種鏡像畫面不太一樣，它是透過下指令的方式「投放」影音內容到你的電視大螢幕上，讓 Chromecast 自行透過網路去串流影音，下完指令後，你的行動裝置及電腦便可以自由離開去做別的工作。</p><p><img src="https://i.imgur.com/w7x45q5.jpg" alt="Imgur"></p>        <h2 id="Sender-App-amp-Receiver-App"   >          <a href="#Sender-App-amp-Receiver-App" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sender-App-amp-Receiver-App" class="headerlink" title="Sender App &amp; Receiver App"></a>Sender App &amp; Receiver App</h2>              <h3 id="Sender-App"   >          <a href="#Sender-App" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sender-App" class="headerlink" title="Sender App"></a>Sender App</h3>      <p>發送端 app（sender app）使用 SDK，將需要播放的媒體的信息發送到 Google 的服務器，服務器再通知接收端播放（所以發送端和接收端必須都可以訪問 Google 的服務器才行）。 </p>        <h3 id="Receiver-App"   >          <a href="#Receiver-App" class="heading-link"><i class="fas fa-link"></i></a><a href="#Receiver-App" class="headerlink" title="Receiver App"></a>Receiver App</h3>      <p>接收端運行的是一個瀏覽器，它會根據發送端的app ID和媒體信息，去載入對應的一個網頁，這個網頁（receiver app）也是由發送端 app 的開發者提供的，的將會負責播放相應的媒體內容。即使接收端是 Chromecast Audio 之類只能播放音頻的硬件，這個網頁也是會載入並渲染的。</p><p><img src="https://i.imgur.com/RdK4lLb.png" alt="Imgur"></p><p>以 Youtube 或 Google Music 這兩個 App 為例子，手機上所看到的這兩個 App，被定義為 Sender App，而含有Chromecast的大型顯示裝置算是 Receiver。</p><p>Receiver App 並不是執行在 Android 框架上的應用程式，而是執行在 Chrome 上的 Web Application，必須使用 HTML + JavaScript 開發，Youtube 有 Youtube Receiver App，Google Music 有 Google Music Receiver App，在 Recever 裝置上收到 Sender 端要求要啟動(Launch)某個 Reciver App 時，就會透過網路載入對應的 HTML5 Web。</p><p>所以在電視上會看到，各種不同的 GoogleCast 應用有不同的展示風格與佈局，且這些畫面壓根和你手機或平板上看到的完全不同，也不是由手機所提供的。</p><p>以 Youtube 來說Sender 端可能只負責將要播放的影片代碼傳遞給 Youtube Receiver App，然後 Youtube  Receiver  App 則透過網路下載 Youtube 影片來播放，因此頻寬完全是 Receiver 在吃的，相對的手持設備端就省電，也可以去做自己的事情，因為 Sender 端不負責下載影片或播放。</p><p>在開發撰寫 Receiver App 之前，面臨到的第一個問題是評估該選擇哪一種 Receiver App 的類型，文件上列出 3 種。</p><ol><li>Default Media Receiver</li><li>Styled Media Receiver</li><li>Custom Receiver</li></ol><p>第一種與第二種在行為上是一模一樣的，只是 Styled Media Receiver 比 Default 多了客制 Background、Logo、Splash、Watermark 等選項，這些內容必須使用一個 css 檔案來管理，並且申請一個 Receiver Application Id 後，將這個 css 檔案的連結提供給 Google 與這個 Application Id 相對應，Chromecast 即可在 Sender 連上並傳送 Application Id 後，知道該開啟哪一種 App 與載入哪一個 css 檔案，第三種 Custom Receiver 指的是自己製作 Web App 所以客製程度是沒有限制的，比較需要注意的是第二種、第三種所要提供的 css 與 web URL 必須是 https 的連結。</p><p><img src="https://i.imgur.com/PFD0Elk.jpg" alt="Imgur"></p><p>Receiver App 雖然不用上架，但卻有一個註冊的流程，剛才說過，Sender 連接上 Receiver 時必須傳送一個 Application Id 告知 Chromecast 開啟哪一個應用程式，第二、三種 Receiver App 必須由開發者自己申請及註冊 Application Id，申請時每個開發者帳號需付美金 5 元，一個帳號底下可以建立數個應用程式，當然一個 Receiver App 對應多個 Sender App 也是可以辦得到的。第一種 Default Media Receiver 因為不需要開啟任何客制的項目，所以不必申請 Application Id，但 Sender 仍需送一個 Application Id 給 Chromecast，這是一個固定的值，常數名稱為 DEFAULT_MEDIA_RECEIVER_APPLICATION_ID</p><hr>        <h2 id="Sender建構及串接流程"   >          <a href="#Sender建構及串接流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sender建構及串接流程" class="headerlink" title="Sender建構及串接流程"></a>Sender建構及串接流程</h2>      <p>在建置Chromecast按鈕時，將物件指向MediaRouteActionProvider，同時Chromecast的SDK會去尋找我們提供的Option Provider Class，以及該Class利用Receiver Application Id建構出來的CastOptions，以利Chromecast進行下一步的對話。</p><p>當Chromecast按鈕被點擊時，首先會跳出附近設備的選單。待使用者選擇後，發送端（手持設備）會發送請求給接收端（大型顯示器），並且啟用SessionManagerListener來監聽該對話。</p><p>確定對話連接成功並開始後（onSessionStarted），會將影片資訊打包成MediaInfo的格式，傳送給當前的CastSession。可由Callbacks確認影片播放失敗與否。</p><p><img src="https://i.imgur.com/xC1PM91.png" alt="Imgur"></p>        <h3 id="建置按鈕"   >          <a href="#建置按鈕" class="heading-link"><i class="fas fa-link"></i></a><a href="#建置按鈕" class="headerlink" title="建置按鈕"></a>建置按鈕</h3>      <p>建置Chromecast按鈕並將物件指向MediaRouteActionProvider</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;menu&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=<span class="string">&quot;@+id/media_route_menu_item&quot;</span></span><br><span class="line">        app:actionProviderClass=<span class="string">&quot;androidx.mediarouter.app.MediaRouteActionProvider&quot;</span></span><br><span class="line">        app:showAsAction=<span class="string">&quot;always&quot;</span> android:title=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">&lt;/menu&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="提供Option-Provider-Class給SDK"   >          <a href="#提供Option-Provider-Class給SDK" class="heading-link"><i class="fas fa-link"></i></a><a href="#提供Option-Provider-Class給SDK" class="headerlink" title="提供Option Provider Class給SDK"></a>提供Option Provider Class給SDK</h3>      <p>將Option Provider Class用meta-data的方式提供給Chromecast SDK</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;meta-<span class="keyword">data</span>   <span class="comment">//給第三方SDK的資料</span></span><br><span class="line">        android:name=<span class="string">&quot;com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME&quot;</span></span><br><span class="line">        android:value=<span class="string">&quot;com.example.app.CastOptionsProvider&quot;</span> /&gt;  <span class="comment">//&lt;---記得更改</span></span><br><span class="line">&lt;/application&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="CastOptions-Builder"   >          <a href="#CastOptions-Builder" class="heading-link"><i class="fas fa-link"></i></a><a href="#CastOptions-Builder" class="headerlink" title="CastOptions.Builder()"></a>CastOptions.Builder()</h3>      <p>Chromecast SDK利用Option Provider Class中的內容（包含所提供的Receiver Application Id），為Chromecast按鈕Build一個CastOptions的實例。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CastOptionsProvider</span> : <span class="type">OptionsProvider &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCastOptions</span><span class="params">(context: <span class="type">Context</span>)</span></span>: CastOptions &#123;</span><br><span class="line">        <span class="keyword">return</span> CastOptions.Builder()</span><br><span class="line">            .setReceiverApplicationId(DEFAULT_MEDIA_RECEIVER_APPLICATION_ID)</span><br><span class="line">            .build()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAdditionalSessionProviders</span><span class="params">(context: <span class="type">Context</span>)</span></span>: List&lt;SessionProvider&gt;? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="Session-Started"   >          <a href="#Session-Started" class="heading-link"><i class="fas fa-link"></i></a><a href="#Session-Started" class="headerlink" title="Session Started"></a>Session Started</h3>      <p>對話確定連接後，將CastSession所需要的MediaInfo包裝並送出讓Receiver Application去作loading的動作。</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionStarted</span><span class="params">(castSession: <span class="type">CastSession</span>, s:<span class="type">String</span> )</span></span> &#123;</span><br><span class="line">    mRemoteData?.let &#123;   <span class="comment">//設置詳細資料</span></span><br><span class="line">        <span class="keyword">val</span> movieMetadata = MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE).apply &#123;</span><br><span class="line">            putString(MediaMetadata.KEY_SUBTITLE, it.videoName)</span><br><span class="line">            putString(MediaMetadata.KEY_TITLE, it.videoTitle)</span><br><span class="line">            addImage(WebImage(Uri.parse(it.videoPicture)))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> mediaInfo = MediaInfo.Builder(it.videoUrl)  <span class="comment">//設置影音資訊</span></span><br><span class="line">            .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)</span><br><span class="line">            .setContentType(<span class="string">&quot;videos/mp4&quot;</span>)</span><br><span class="line">            .setMetadata(movieMetadata)</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//開始設定遠端投屏以及狀態監聽</span></span><br><span class="line">        castSession.remoteMediaClient.apply &#123;</span><br><span class="line">            load(mediaInfo, <span class="literal">true</span>, <span class="number">0</span>).setResultCallback(<span class="keyword">object</span> :</span><br><span class="line">                ResultCallbacks&lt;RemoteMediaClient.MediaChannelResult&gt;() &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(mediaChannelResult: <span class="type">RemoteMediaClient</span>.<span class="type">MediaChannelResult</span>)</span></span> &#123;</span><br><span class="line">                    <span class="comment">//TODO()</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(status: <span class="type">Status</span>)</span></span> &#123;</span><br><span class="line">                    stop()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><hr>        <h2 id="Receiver教學網址"   >          <a href="#Receiver教學網址" class="heading-link"><i class="fas fa-link"></i></a><a href="#Receiver教學網址" class="headerlink" title="Receiver教學網址"></a>Receiver教學網址</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://codelabs.developers.google.com/codelabs/cast-receiver#0" >https://codelabs.developers.google.com/codelabs/cast-receiver#0</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="https://i.imgur.com/mPhc6B0.png" alt="Imgur"></p>        <h3 id="範例檔"   >          <a href="#範例檔" class="heading-link"><i class="fas fa-link"></i></a><a href="#範例檔" class="headerlink" title="範例檔"></a>範例檔</h3>      <ul><li><a href="/file/da740470f4af94a289424160beed16fc">index.html</a>   ：主視圖  </li><li><a href="/file/d74e7a16668e8c911dffdcb84ee57af9">receiver.js</a>  ：包含所有使Receiver運作的程式碼</li></ul>        <h3 id="基本的Cast-Receiver"   >          <a href="#基本的Cast-Receiver" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本的Cast-Receiver" class="headerlink" title="基本的Cast Receiver"></a>基本的Cast Receiver</h3>      <p>⭐️ <font color=Peru>index.html</font> 初始化：合併API ( CastDebugLogger等等 )<br>⭐️ <font color=Peru>index.html</font> 引用script <font color=Turquoise>receiver.js</font>     </p><figure class="highlight html"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Cast CAF Receiver<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//www.gstatic.com/cast/sdk/libs/caf_receiver/v3/cast_receiver_framework.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Cast Debug Logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//www.gstatic.com/cast/sdk/libs/devtools/debug_layer/caf_receiver_logger.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cast-media-player</span>&gt;</span><span class="tag">&lt;/<span class="name">cast-media-player</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/receiver.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>⭐️ <font color=Turquoise>receiver.js</font> 初始化：取得CastReceiverContext、CastDebugLogger等等</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = cast.framework.CastReceiverContext.getInstance();</span><br><span class="line"><span class="keyword">const</span> playerManager = context.getPlayerManager();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Media Sample API Values</span></span><br><span class="line"><span class="keyword">const</span> SAMPLE_URL = <span class="string">&quot;https://storage.googleapis.com/cpe-sample-media/content.json&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> StreamType = &#123;</span><br><span class="line">   DASH: <span class="string">&#x27;application/dash+xml&#x27;</span>,</span><br><span class="line">   HLS: <span class="string">&#x27;application/x-mpegurl&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> TEST_STREAM_TYPE = StreamType.DASH</span><br><span class="line"></span><br><span class="line"><span class="comment">// Debug Logger</span></span><br><span class="line"><span class="keyword">const</span> castDebugLogger = cast.debug.CastDebugLogger.getInstance();</span><br><span class="line"><span class="keyword">const</span> LOG_TAG = <span class="string">&#x27;MyAPP.LOG&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>⭐️ <font color=Turquoise>receiver.js</font> LOAD 訊息攔截：取得影片資訊  </p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">playerManager.setMessageInterceptor(   <span class="comment">//訊息攔截器</span></span><br><span class="line">   cast.framework.messages.MessageType.LOAD,    <span class="comment">//Type -&gt; LOAD</span></span><br><span class="line">   request =&gt; &#123;</span><br><span class="line">      castDebugLogger.info(LOG_TAG, <span class="string">&#x27;Intercepting LOAD request&#x27;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Map contentId to entity</span></span><br><span class="line">      <span class="keyword">if</span> (request.media &amp;&amp; request.media.entity) &#123;</span><br><span class="line">         request.media.contentId = request.media.entity;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// Fetch content repository by requested contentId</span></span><br><span class="line">         makeRequest(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://storage.googleapis.com/cpe-sample-media/content.json&#x27;</span>)</span><br><span class="line">           .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">let</span> item = data[request.media.contentId];</span><br><span class="line">              <span class="keyword">if</span>(!item) &#123;</span><br><span class="line">                 <span class="comment">// Content could not be found in repository</span></span><br><span class="line">                 castDebugLogger.error(LOG_TAG, <span class="string">&#x27;Content not found&#x27;</span>);</span><br><span class="line">                 reject();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">// Adjusting request to make requested content playable</span></span><br><span class="line">                 request.media.contentUrl = item.stream.dash;</span><br><span class="line">                 request.media.contentType = <span class="string">&#x27;application/dash+xml&#x27;</span>;</span><br><span class="line">                 castDebugLogger.warn(LOG_TAG, <span class="string">&#x27;Playable URL:&#x27;</span>, request.media.contentUrl);</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// Add metadata</span></span><br><span class="line">                 <span class="keyword">let</span> metadata = <span class="keyword">new</span> cast.framework.messages.MovieMediaMetadata();</span><br><span class="line">                 metadata.metadataType = cast.framework.messages.MetadataType.MOVIE;</span><br><span class="line">                 metadata.title = item.title;</span><br><span class="line">                 metadata.subtitle = item.author;</span><br><span class="line"></span><br><span class="line">                 request.media.metadata = metadata;</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// Resolve request</span></span><br><span class="line">                 resolve(request);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>⭐️ <font color=Turquoise>receiver.js</font> 對畫面進行處理</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Optimizing for smart displays</span></span><br><span class="line"><span class="keyword">const</span> touchControls = cast.framework.ui.Controls.getInstance();</span><br><span class="line"><span class="keyword">const</span> playerData = <span class="keyword">new</span> cast.framework.ui.PlayerData();</span><br><span class="line"><span class="keyword">const</span> playerDataBinder = <span class="keyword">new</span> cast.framework.ui.PlayerDataBinder(playerData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> browseItems = getBrowseItems();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBrowseItems</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> browseItems = [];</span><br><span class="line">   makeRequest(<span class="string">&#x27;GET&#x27;</span>, SAMPLE_URL)</span><br><span class="line">   .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">         <span class="keyword">let</span> item = <span class="keyword">new</span> cast.framework.ui.BrowseItem();</span><br><span class="line">         item.entity = key;</span><br><span class="line">         item.title = data[key].title;</span><br><span class="line">         item.subtitle = data[key].description;</span><br><span class="line">         item.image = <span class="keyword">new</span> cast.framework.messages.Image(data[key].poster);</span><br><span class="line">         item.imageType = cast.framework.ui.BrowseImageType.MOVIE;</span><br><span class="line">         browseItems.push(item);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">return</span> browseItems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> browseContent = <span class="keyword">new</span> cast.framework.ui.BrowseContent();</span><br><span class="line">browseContent.title = <span class="string">&#x27;Up Next&#x27;</span>;</span><br><span class="line">browseContent.items = browseItems;</span><br><span class="line">browseContent.targetAspectRatio =</span><br><span class="line">   cast.framework.ui.BrowseImageAspectRatio.LANDSCAPE_16_TO_9;</span><br><span class="line"></span><br><span class="line">playerDataBinder.addEventListener(</span><br><span class="line">   cast.framework.ui.PlayerDataEventType.MEDIA_CHANGED,</span><br><span class="line">   (e) =&gt; &#123;</span><br><span class="line">       <span class="keyword">if</span> (!e.value) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Media browse</span></span><br><span class="line">       touchControls.setBrowseContent(browseContent);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Clear default buttons and re-assign</span></span><br><span class="line">       touchControls.clearDefaultSlotAssignments();</span><br><span class="line">       touchControls.assignButton(</span><br><span class="line">          cast.framework.ui.ControlsSlot.SLOT_PRIMARY_1,</span><br><span class="line">          cast.framework.ui.ControlsButton.SEEK_BACKWARD_30</span><br><span class="line">       );</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>⭐️ <font color=Turquoise>receiver.js</font> APP啟用</p><figure class="highlight javascript"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = cast.framework.CastReceiverContext.getInstance();</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">context.start();</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>⭐️ 恭喜</p><p><img src="https://i.imgur.com/WqAuzu4.png" alt="Imgur"></p>        <h6 id="tags-技術分享-Chromecast"   >          <a href="#tags-技術分享-Chromecast" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-技術分享-Chromecast" class="headerlink" title="tags: 技術分享 Chromecast"></a>tags: <code>技術分享</code> <code>Chromecast</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正規表示法Regex</title>
      <link href="/tutu1023/2021/04/29/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E6%B3%95Regex/"/>
      <url>/tutu1023/2021/04/29/%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E6%B3%95Regex/</url>
      
        <content type="html"><![CDATA[<p>  Update：2020/03/03<br>  Code：Kotlin<br>  By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://riptutorial.com/zh-TW/kotlin/example/32686/kotlin%E4%B8%AD%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E7%B0%A1%E4%BB%8B" >https://riptutorial.com/zh-TW/kotlin/example/32686/kotlin%E4%B8%AD%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E7%B0%A1%E4%BB%8B</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>目的：取得特殊條件下的字串</p><hr>        <h2 id="使用教學"   >          <a href="#使用教學" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用教學" class="headerlink" title="使用教學"></a>使用教學</h2>              <h3 id="該字串是否具備特定值containsMatchIn"   >          <a href="#該字串是否具備特定值containsMatchIn" class="heading-link"><i class="fas fa-link"></i></a><a href="#該字串是否具備特定值containsMatchIn" class="headerlink" title="該字串是否具備特定值containsMatchIn"></a>該字串是否具備特定值containsMatchIn</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> regex = Regex(pattern = <span class="string">&quot;c|d&quot;</span>)     <span class="comment">//條件：字串內含c或d</span></span><br><span class="line"><span class="keyword">val</span> matched = regex.containsMatchIn(input = <span class="string">&quot;abc&quot;</span>)   <span class="comment">//字串abc內是否含c或d(return ture)</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="尋找find"   >          <a href="#尋找find" class="heading-link"><i class="fas fa-link"></i></a><a href="#尋找find" class="headerlink" title="尋找find"></a>尋找find</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> phoneNumber :String? = Regex(pattern = <span class="string">&quot;&quot;&quot;\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;&quot;&quot;&quot;</span>)  <span class="comment">//條件：(三位數)-(三位數)-(四位數)</span></span><br><span class="line">    .find(input = <span class="string">&quot;phone: 123-456-7890, e..&quot;</span>)?.value <span class="comment">// phoneNumber = &quot;123-456-7890&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="取回安全空值””而不是null-orEmpty"   >          <a href="#取回安全空值””而不是null-orEmpty" class="heading-link"><i class="fas fa-link"></i></a><a href="#取回安全空值””而不是null-orEmpty" class="headerlink" title="取回安全空值””而不是null : orEmpty()"></a>取回安全空值””而不是null : orEmpty()</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> matchResult = </span><br><span class="line">    Regex(<span class="string">&quot;c|d&quot;</span>).find(<span class="string">&quot;efg&quot;</span>)           <span class="comment">//matchResult = null</span></span><br><span class="line"><span class="keyword">val</span> a = matchResult?.value             <span class="comment">//a = null</span></span><br><span class="line"><span class="keyword">val</span> b = matchResult?.value.orEmpty()   <span class="comment">//b = &quot;&quot;  if null 則 return &quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="特殊範圍尋找pattern-“player-amp-”"   >          <a href="#特殊範圍尋找pattern-“player-amp-”" class="heading-link"><i class="fas fa-link"></i></a><a href="#特殊範圍尋找pattern-“player-amp-”" class="headerlink" title="特殊範圍尋找pattern = “player=(.*?)&amp;”"></a>特殊範圍尋找pattern = “player=<font color = INDIANRED>(.*?)</font>&amp;”</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> regex = Regex(pattern = <span class="string">&quot;player=(.*?)&amp;&quot;</span>)   <span class="comment">//取得&quot;player=&quot;到&quot;&amp;&quot;的字串 (.*?)包含任意符號</span></span><br><span class="line">    .find(input = <span class="string">&quot;player=m3u8&amp;playId=9487&quot;</span>)?.value <span class="comment">//regex = &quot;player=m3u8&amp;&quot;</span></span><br><span class="line"><span class="keyword">val</span> result =</span><br><span class="line">    regex?.let &#123; </span><br><span class="line">        Regex(<span class="string">&quot;player=&quot;</span>).replace(it, <span class="string">&quot;&quot;</span>) </span><br><span class="line">        Regex(<span class="string">&quot;&amp;&quot;</span>).replace(it, <span class="string">&quot;&quot;</span>)    <span class="comment">//result = &quot;m3u8&quot;</span></span><br><span class="line">    &#125;                                           </span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-特殊語法-正規表示法-Regex-Find"   >          <a href="#tags-特殊語法-正規表示法-Regex-Find" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-特殊語法-正規表示法-Regex-Find" class="headerlink" title="tags: 特殊語法 正規表示法 Regex Find"></a>tags: <code>特殊語法</code> <code>正規表示法</code> <code>Regex</code> <code>Find</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可調色字串ColorfulString</title>
      <link href="/tutu1023/2021/04/29/%E5%8F%AF%E8%AA%BF%E8%89%B2%E5%AD%97%E4%B8%B2ColorfulString/"/>
      <url>/tutu1023/2021/04/29/%E5%8F%AF%E8%AA%BF%E8%89%B2%E5%AD%97%E4%B8%B2ColorfulString/</url>
      
        <content type="html"><![CDATA[<p>Update：2020/03/03  Code：Kotlin<br>By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://stackoverflow.com/questions/19630160/change-color-inside-strings-xml" >https://stackoverflow.com/questions/19630160/change-color-inside-strings-xml</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="/file/b1ff1386666fa0dd01b64290ae0edbee" alt="Screenshot_20200226-112535.png"><img src="/file/9feee09762abd40cbc676c61945776b0" alt="Screenshot_20200226-112035.png"></p><p>希望能夠從API取得的字串自由改變顏色。</p><hr>        <h3 id="改變文字格式"   >          <a href="#改變文字格式" class="heading-link"><i class="fas fa-link"></i></a><a href="#改變文字格式" class="headerlink" title="改變文字格式"></a>改變文字格式</h3>      <p>首先是API吐的字串要有所改變</p><ul><li>換行<font color = 'indianred'>\n</font>改成<font color = 'indianred'>&lt;br&gt;</font>  </li><li>空行<font color = 'indianred'>\n\n</font>改成<font color = 'indianred'>&lt;p&gt;</font></li><li>要變色的文字前後用變色標籤包起來<font color = 'indianred'>&lt;font color=’red’&gt;&lt;/font&gt;</font></li></ul><p>Ｂefore:</p><p>“日夜趕工，餐餐吃泡麵，終於修復以下問題拉<font color = 'indianred'>\n\n</font>1.搜尋框…<font color = 'indianred'>\n</font>2.自動…<font color = 'indianred'>\n</font>4.播放頁…<font color = 'indianred'>\n\n</font>P.S 覺得APP好用，記得要分享給你們的小夥伴們喔！”</p><p>Ａfter:</p><p>“日夜趕工，餐餐吃泡麵，終於修復以下問題拉<font color = 'indianred'>&lt;p&gt;</font>1.搜尋框…<font color = 'indianred'>&lt;br&gt;</font>2.自動…<font color = 'indianred'>&lt;br&gt;</font>4.播放頁…<font color = 'indianred'>&lt;p&gt;</font><font color = 'indianred'>&lt;font color=’red’&gt;</font>P.S  覺得APP好用，記得要分享給你們的小夥伴們喔！<font color = 'indianred'>&lt;/font&gt;</font>“</p><p>附上顏色標籤網址：<br><span class="exturl"><a class="exturl__link"   href="https://htmlcolorcodes.com/color-names/" >HTML顏色標籤(RED)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>      <span class="exturl"><a class="exturl__link"   href="https://htmlcolorcodes.com/" >HEX碼查詢(#ABCDEF)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="AS承接字串"   >          <a href="#AS承接字串" class="heading-link"><i class="fas fa-link"></i></a><a href="#AS承接字串" class="headerlink" title="AS承接字串"></a>AS承接字串</h3>      <p>從API接到文字之後，要先經過Html.fromHtml()處理才能套用到TextView上面</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> message:String = getApiMessage()</span><br><span class="line">mTextView.setText(Html.fromHtml(message), TextView.BufferType.SPANNABLE)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><font color = 'INDIANRED'>這樣就</font><font color = 'orange'>可以隨</font><font color = '#F4D03F'>心所欲</font><font color = 'DARKSEAGREEN'>地變換</font><font color = 'STEELBLUE'>文字顏</font><font color = 'MEDIUMPURPLE'>色囉 !</font></p><p>P.S. AS無法辨識太複雜的顏色標籤，建議使用較為簡單的RED、YELLOW，在發佈前先測試過</p><p>或直接使用HEX碼。</p>        <h6 id="tags-特殊語法-TextView-Html-String-變色"   >          <a href="#tags-特殊語法-TextView-Html-String-變色" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-特殊語法-TextView-Html-String-變色" class="headerlink" title="tags: 特殊語法 TextView Html String 變色"></a>tags: <code>特殊語法</code> <code>TextView</code> <code>Html</code> <code>String</code> <code>變色</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>調試模式設定方法DebugView</title>
      <link href="/tutu1023/2021/04/29/%E8%AA%BF%E8%A9%A6%E6%A8%A1%E5%BC%8F%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95DebugView/"/>
      <url>/tutu1023/2021/04/29/%E8%AA%BF%E8%A9%A6%E6%A8%A1%E5%BC%8F%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95DebugView/</url>
      
        <content type="html"><![CDATA[<p>  Update：2020/07/14<br>  By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://shengyu7697.github.io/blog/2019/10/26/Android-adb/" >https://shengyu7697.github.io/blog/2019/10/26/Android-adb/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><img src="/file/f3424d7101ac9dbe1d8a2e2c1e71c44a" alt="image.png"></p><p>為測試一款新的app是否正常植入GA（或是植入GA後沒有正常收到訊息），故需要先行測試FirebaseAnalytics指令是否正常傳送。</p><hr><p>1.Firebase官網只提到，要開啟手機設備的調試模式，需USB插上手機，並輸入語法。</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell setprop debug.firebase.analytics.app &lt;package_name&gt;</span><br></pre></td></tr></table></div></figure><p>到AS的Terminal輸入指令，系統卻說不認識adb，這時須先下載platform-tools工具</p><ul><li><span class="exturl"><a class="exturl__link"   href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip" >Windows載點</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li><li><span class="exturl"><a class="exturl__link"   href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip" >MAC載點</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li></ul><p>載好之後解壓縮並且丟到一個自己找得到的位置（直接丟在package內的第一層）</p><p>2.回到Terminal，並進入platform-tools資料夾中</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd platform-tools</span><br></pre></td></tr></table></div></figure><p>進入之後，可能會發現系統找不到adb這個指令，是因為環境變數沒有設置好。</p><p>這時候就可以參考<span class="exturl"><a class="exturl__link"   href="https://medium.com/@stanleylin_7768/android-studio-mac%E4%B8%ADadb-command-not-found-9b8c2b559f4c" >Ｊ個網址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><pre><code>(1) 首先輸入下列指令，開啟一個新檔案    touch .bash_profile(2) 打開該檔案    open -e .bash_profile(3) 在跳出的空白視窗中，輸入先前放置platform-tools的路徑。    例：/Users/MyMac/MyApplication/platform-tools    export PATH=$&#123;PATH&#125;:/Users/MyMac/MyApplication/platform-tools    輸入完後直接關閉，會自動存檔。(4)輸入下列指令更新剛剛的配置    source .bash_profile    就可以發現剛剛的adb指令已經可以開始使用啦～</code></pre><p>3.輸入啟用指令</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell setprop debug.firebase.analytics.app &lt;package_name&gt;</span><br></pre></td></tr></table></div></figure><p>Terminal不會有任何反應，但過一兩分鐘後，Firebase的DebugView頁面應該會連接上手機。</p><p>若遲遲沒有連接，可以到Firebase設定去檢查應用程式的SHA1指紋是否一致</p><p>4.關閉調適模式</p><figure class="highlight plain"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell setprop debug.firebase.analytics.app .none.</span><br></pre></td></tr></table></div></figure>        <h6 id="tags-工具教學-Firebase-Debug"   >          <a href="#tags-工具教學-Firebase-Debug" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-工具教學-Firebase-Debug" class="headerlink" title="tags: 工具教學 Firebase Debug"></a>tags: <code>工具教學</code> <code>Firebase</code> <code>Debug</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Blog上傳教學</title>
      <link href="/tutu1023/2021/04/29/Blog/"/>
      <url>/tutu1023/2021/04/29/Blog/</url>
      
        <content type="html"><![CDATA[<p>上傳文章<br>-&gt;Source-&gt;_posts-&gt;丟入文章.md檔 </p><p>更改主題<br>-&gt;themes-&gt;丟入主題<br>_config.yml theme: 替換主題名稱</p><p>hexo clean 清除靜態檔案</p><p>hexo g 建立新的靜態檔案</p><p>hexo s 測試</p><p>hexo d 上傳到git</p><p><span class="exturl"><a class="exturl__link"   href="https://www.notion.so/f1c7f1cd7420422a9728991f5b271715" >https://www.notion.so/f1c7f1cd7420422a9728991f5b271715</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h6 id="tags-工具教學-Hexo-Blog"   >          <a href="#tags-工具教學-Hexo-Blog" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-工具教學-Hexo-Blog" class="headerlink" title="tags: 工具教學 Hexo Blog"></a>tags: <code>工具教學</code> <code>Hexo</code> <code>Blog</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>遠端投屏ChromeCast</title>
      <link href="/tutu1023/2021/04/29/%E9%81%A0%E7%AB%AF%E6%8A%95%E5%B1%8FChromeCast/"/>
      <url>/tutu1023/2021/04/29/%E9%81%A0%E7%AB%AF%E6%8A%95%E5%B1%8FChromeCast/</url>
      
        <content type="html"><![CDATA[<p>Update：2019/12/11  Code：Kotlin<br>By：Ada</p><p>參考來源：<br><span class="exturl"><a class="exturl__link"   href="https://qiita.com/tomo1139/items/fea907958160f77760ef" >https://qiita.com/tomo1139/items/fea907958160f77760ef</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://medium.com/@quentin7b/make-your-android-app-compatible-with-your-chromecast-ca751294c4e2" >https://medium.com/@quentin7b/make-your-android-app-compatible-with-your-chromecast-ca751294c4e2</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>1.導入依賴 google play service framework、mediarouter</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.1.0-rc01&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.mediarouter:mediarouter:1.1.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.gms:play-services-cast-framework:17.1.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>2.創一個castOptionProvider 創造notification</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CastOptionsProvider</span> : <span class="type">OptionsProvider &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCastOptions</span><span class="params">(context: <span class="type">Context</span>)</span></span>: CastOptions &#123;</span><br><span class="line">        <span class="keyword">return</span> CastOptions.Builder()</span><br><span class="line">            .setReceiverApplicationId(context.getString(R.string.app_id))</span><br><span class="line">            .build()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAdditionalSessionProviders</span><span class="params">(context: <span class="type">Context</span>)</span></span>: List&lt;SessionProvider&gt;? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>其中R.string.app_id為申請ChromeCast後得到的一組ＩＤ，但網路上流傳(?)一組大家都可以用的id</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- App Id <span class="keyword">for</span> ChromeCast--&gt;</span><br><span class="line">&lt;string name=<span class="string">&quot;app_id&quot;</span> translatable=<span class="string">&quot;false&quot;</span>&gt;CC1AD845&lt;/string&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>3.相關權限、meta-data標記castOptionProvider，記得更改放置CastOptionsProvider的路徑</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;meta-<span class="keyword">data</span></span><br><span class="line">        android:name=</span><br><span class="line">            <span class="string">&quot;com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME&quot;</span></span><br><span class="line">        android:value=<span class="string">&quot;com.example.casttest.CastOptionsProvider&quot;</span> /&gt;  <span class="comment">//&lt;---記得更改</span></span><br><span class="line">&lt;/application&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>4.在想要投屏的activity設定getShareInstance = this</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//MainActivity.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> castContext: CastContext? = <span class="literal">null</span></span><br><span class="line">castContext = CastContext.getSharedInstance(<span class="keyword">this</span>)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>chromecast不支援機種</strong></p><p>大陸手機(如：小米)因為沒有google play，所以他們的手機基本上不支援chromecast</p><p>因此在getSharedInstance的時候就會報錯</p><p>加上一個判斷式檢查是否支援Google的ChromeCast</p><pre><code>GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(this)</code></pre><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//MainActivity.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isCastApiAvailable())&#123;</span><br><span class="line">    castContext = CastContext.getSharedInstance(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isCastApiAvailable</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> isCastApiAvailable = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(<span class="keyword">this</span>) == ConnectionResult.SUCCESS</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        CastContext.getSharedInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        <span class="comment">// track non-fatal</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isCastApiAvailable</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>5.布置cast專屬按鈕</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//main_activity.xml</span></span><br><span class="line"></span><br><span class="line">&lt;android.support.v7.app.MediaRouteButton</span><br><span class="line">    android:id=<span class="string">&quot;@+id/media_route_button&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">    android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">    android:mediaRouteTypes=<span class="string">&quot;user&quot;</span></span><br><span class="line">    android:visibility=<span class="string">&quot;gone&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//res/menu/cast_expanded_controller_menu.xml</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;menu </span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span> &gt;</span><br><span class="line">    </span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=<span class="string">&quot;@+id/media_route_menu_item&quot;</span></span><br><span class="line">        app:actionProviderClass=<span class="string">&quot;androidx.mediarouter.app.MediaRouteActionProvider&quot;</span></span><br><span class="line">        app:showAsAction=<span class="string">&quot;always&quot;</span> android:title=<span class="string">&quot;&quot;</span>/&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/menu&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>並在activity內做串接的動作</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//MainActivity.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>)</span></span>:<span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreateOptionsMenu(menu)</span><br><span class="line">    menuInflater.inflate(R.menu.cast_expanded_controller_menu, menu)</span><br><span class="line">    CastButtonFactory.setUpMediaRouteButton(</span><br><span class="line">        applicationContext,</span><br><span class="line">        menu,</span><br><span class="line">        R.id.media_route_menu_item)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>如果要改變按鈕顏色（預設為黑色），需要style檔設定</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;style name=<span class="string">&quot;CustomMediaRouterTheme&quot;</span> parent=<span class="string">&quot;Theme.MediaRouter&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;mediaRouteButtonStyle&quot;</span>&gt;<span class="meta">@style</span>/CustomMediaRouteButtonStyle&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style name=<span class="string">&quot;CustomMediaRouteButtonStyle&quot;</span> parent=<span class="string">&quot;Widget.MediaRouter.Light.MediaRouteButton&quot;</span>&gt;</span><br><span class="line">    &lt;item name=<span class="string">&quot;mediaRouteButtonTint&quot;</span>&gt;#FFFFFF&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//主要的theme中標明套用</span></span><br><span class="line">&lt;style name=<span class="string">&quot;AppTheme&quot;</span> parent=<span class="string">&quot;Theme.AppCompat.Light.NoActionBar&quot;</span>&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;item name=<span class="string">&quot;mediaRouteTheme&quot;</span>&gt;<span class="meta">@style</span>/CustomMediaRouterTheme&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>6.sessionManagerListener 連接狀態的監聽 有start、startFailed、end、resumed等等 </p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> mSessionManagerListener = SessionManagerListenerImpl()</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionManagerListenerImpl</span> : <span class="type">SessionManagerListener</span>&lt;<span class="type">CastSession</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionStarting</span><span class="params">( castSession:<span class="type">CastSession</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionStarted</span><span class="params">(castSession:<span class="type">CastSession</span>, s:<span class="type">String</span> )</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionStartFailed</span><span class="params">(castSession:<span class="type">CastSession</span>, i:<span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionEnding</span><span class="params">(castSession:<span class="type">CastSession</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionEnded</span><span class="params">(castSession:<span class="type">CastSession</span>, i:<span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionResuming</span><span class="params">(castSession:<span class="type">CastSession</span>, s:<span class="type">String</span> )</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionResumed</span><span class="params">(castSession:<span class="type">CastSession</span>, b:<span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionResumeFailed</span><span class="params">(castSession:<span class="type">CastSession</span>, i:<span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionSuspended</span><span class="params">(castSession:<span class="type">CastSession</span>,  i:<span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>需要在onPause、onResume重新定義</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(isCastApiAvailable())&#123;</span><br><span class="line">        castContext!!.sessionManager.removeSessionManagerListener(mSessionManagerListener, CastSession::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume()    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(isCastApiAvailable())&#123;</span><br><span class="line">        castContext!!.sessionManager.addSessionManagerListener(mSessionManagerListener, CastSession::<span class="keyword">class</span>.java)</span><br><span class="line">    &#125;        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>7.設定<em><strong>onSessionStared</strong></em>在成功連接後要做的事情</p><p><strong>movieMetadata</strong>：儲存影片的標題、副標題，或是圖片網址</p><p><strong>mediaInfo</strong>：建立影片連結、聲明影片格式且夾帶movieMetadata</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSessionStarted</span><span class="params">(castSession:<span class="type">CastSession</span>, s:<span class="type">String</span> )</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> movieMetadata = MediaMetadata(MediaMetadata.MEDIA_TYPE_MOVIE)</span><br><span class="line">    movieMetadata.putString(MediaMetadata.KEY_SUBTITLE, airVideoTitle)</span><br><span class="line">    movieMetadata.putString(MediaMetadata.KEY_TITLE, airVideoName)</span><br><span class="line">    movieMetadata.addImage(WebImage(Uri.parse(videoPic)))</span><br><span class="line">    movieMetadata.addImage(WebImage(Uri.parse(videoPic)))</span><br><span class="line">    <span class="keyword">val</span> mediaInfo = MediaInfo.Builder(videoUrl)</span><br><span class="line">        .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)</span><br><span class="line">        .setContentType(<span class="string">&quot;videos/mp4&quot;</span>)</span><br><span class="line">        .setMetadata(movieMetadata)</span><br><span class="line">        .build()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">val</span> remoteMediaClient = castSession.remoteMediaClient</span><br><span class="line">    remoteMediaClient.load(mediaInfo, <span class="literal">true</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>由於連接後需要馬上彈出相關的遙控器畫面給使用者使用，於是要改寫remoteMediaClient.load，設定CallBack</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">remoteMediaClient.load(mediaInfo, <span class="literal">true</span>, <span class="number">0</span>).setResultCallback(<span class="keyword">object</span> :ResultCallbacks&lt;RemoteMediaClient.MediaChannelResult&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSuccess</span><span class="params">(<span class="meta">@NonNull</span> mediaChannelResult:<span class="type">RemoteMediaClient</span>.<span class="type">MediaChannelResult</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(videoContext,ExpandedControlsActivity::<span class="keyword">class</span>.java)</span><br><span class="line">        startActivity(videoContext,intent,<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NonNull</span> status: <span class="type">Status</span>)</span></span> &#123;</span><br><span class="line">        Toast.makeText(videoContext, <span class="string">&quot;連接失敗&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        remoteMediaClient.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>8.建立ExpandedController</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpandedControlsActivity</span> : <span class="type">ExpandedControllerActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>)</span></span>:<span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreateOptionsMenu(menu)</span><br><span class="line">        menuInflater.inflate(R.menu.cast_expanded_controller_menu, menu)</span><br><span class="line">        CastButtonFactory.setUpMediaRouteButton(</span><br><span class="line">            applicationContext,</span><br><span class="line">            menu,</span><br><span class="line">            R.id.media_route_menu_item)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//AndroidMenifest.xml</span></span><br><span class="line"></span><br><span class="line">&lt;application&gt;</span><br><span class="line">...</span><br><span class="line">&lt;activity</span><br><span class="line">        android:name=<span class="string">&quot;.ExpandedControlsActivity&quot;</span></span><br><span class="line">        android:label=<span class="string">&quot;@string/app_name&quot;</span></span><br><span class="line">        android:launchMode=<span class="string">&quot;singleTask&quot;</span></span><br><span class="line">        android:theme=<span class="string">&quot;@style/Theme.AppCompat.NoActionBar&quot;</span></span><br><span class="line">        android:screenOrientation=<span class="string">&quot;portrait&quot;</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">    &lt;meta-<span class="keyword">data</span></span><br><span class="line">            android:name=<span class="string">&quot;android.support.PARENT_ACTIVITY&quot;</span></span><br><span class="line">            android:value=<span class="string">&quot;com.example.casttest.MainActivity&quot;</span>/&gt;</span><br><span class="line">&lt;/activity&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/application&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>且串接 Controller到castOptionProvider上</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CastOptionsProvider</span> : <span class="type">OptionsProvider &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCastOptions</span><span class="params">(context: <span class="type">Context</span>)</span></span>: CastOptions &#123;</span><br><span class="line">        <span class="keyword">val</span> buttonActions = arrayListOf&lt;String&gt;()   <span class="comment">//notification要使用的按鈕列表</span></span><br><span class="line">        buttonActions.add(MediaIntentReceiver.ACTION_REWIND)</span><br><span class="line">        buttonActions.add(MediaIntentReceiver.ACTION_TOGGLE_PLAYBACK)</span><br><span class="line">        buttonActions.add(MediaIntentReceiver.ACTION_FORWARD)</span><br><span class="line">        buttonActions.add(MediaIntentReceiver.ACTION_STOP_CASTING)</span><br><span class="line">        <span class="keyword">val</span> compatButtonActionsIndicies = intArrayOf(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">val</span> notificationOptions = NotificationOptions.Builder()</span><br><span class="line">            .setTargetActivityClassName(ExpandedControlsActivity::<span class="keyword">class</span>.java.name)</span><br><span class="line">            .setActions(buttonActions, compatButtonActionsIndicies)</span><br><span class="line">            .setSkipStepMs(<span class="number">30</span> * DateUtils.SECOND_IN_MILLIS)</span><br><span class="line">            .build()</span><br><span class="line">        <span class="keyword">val</span> mediaOptions = CastMediaOptions.Builder()</span><br><span class="line">            .setNotificationOptions(notificationOptions)</span><br><span class="line">            .setExpandedControllerActivityClassName(ExpandedControlsActivity::<span class="keyword">class</span>.java.name)</span><br><span class="line">            .build()</span><br><span class="line">        <span class="keyword">return</span> CastOptions.Builder()</span><br><span class="line">            .setReceiverApplicationId(context.getString(R.string.app_id))</span><br><span class="line">            .setCastMediaOptions(mediaOptions)</span><br><span class="line">            .build()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getAdditionalSessionProviders</span><span class="params">(context: <span class="type">Context</span>)</span></span>: List&lt;SessionProvider&gt;? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>9.覆寫ExpandedController，套用自己拉的介面，利用uiMediaController串接功能</p><p><strong>uiMediaController.bind(綁定)SeekBar(expandedCastSeekBar,1000L)</strong></p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpandedControlsActivity</span> : <span class="type">ExpandedControllerActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(bundle: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle)</span><br><span class="line">        setContentView(R.layout.expanded_controller)   <span class="comment">//毫不猶豫地給他套用上去</span></span><br><span class="line"></span><br><span class="line">        uiMediaController.bindViewToRewind(expandedRewind,<span class="number">10000</span>)</span><br><span class="line">        uiMediaController.bindViewToForward(expandedForward,<span class="number">10000</span>)</span><br><span class="line">        uiMediaController.bindSeekBar(expandedCastSeekBar,<span class="number">1000L</span>)</span><br><span class="line">        uiMediaController.bindTextViewToStreamPosition(expandedPosition,<span class="literal">true</span>,<span class="number">1000</span>)</span><br><span class="line">        uiMediaController.bindTextViewToStreamDuration(expandedDuration)</span><br><span class="line">        uiMediaController.bindImageViewToPlayPauseToggle(expandedPlayPause,resources.getDrawable(R.drawable.play),resources.getDrawable(R.drawable.pause),<span class="literal">null</span>,<span class="literal">null</span>, <span class="literal">false</span>)</span><br><span class="line">        uiMediaController.bindImageViewToMuteToggle(expandedMute)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>缺點：越深入的物件名稱由於保護的關係，所以看起來都很相像，拿取存影片資訊的mediaMetaData時，需要用心挖</p><p>ex.</p><pre><code>private TextView zzxy; private SeekBar zzvx; private CastSeekBar zzxz; private ImageView zzya; private ImageView zzyb; private int[] zzyc; </code></pre><p>▼拿取存影片資訊的mediaMetaData</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> metadata: com.google.android.gms.cast.MediaMetadata=session.remoteMediaClient.mediaInfo.metadata</span><br><span class="line">expandedTitle.text = metadata.getString(<span class="string">&quot;com.google.android.gms.cast.metadata.TITLE&quot;</span>)</span><br><span class="line">expandedSubTitle.text = (zzp.zzb(metadata)).toString()</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>震動方法以及按鈕調整音量方法</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//震動控制</span></span><br><span class="line"><span class="keyword">val</span> myVibrator = application.getSystemService(Service.VIBRATOR_SERVICE) <span class="keyword">as</span> Vibrator</span><br><span class="line"><span class="comment">//get session</span></span><br><span class="line"><span class="keyword">val</span> session:CastSession = CastContext.getSharedInstance(applicationContext).sessionManager.currentCastSession</span><br><span class="line">expandedMute.setOnClickListener &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">26</span>) &#123;</span><br><span class="line">        myVibrator.vibrate(VibrationEffect.createOneShot(<span class="number">100</span>, <span class="number">10</span>))   <span class="comment">//按鈕震動</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        myVibrator.vibrate(<span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(session.isConnected)&#123;   </span><br><span class="line">        session.isMute = !session.isMute   <span class="comment">//靜音</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//音量控制</span></span><br><span class="line"><span class="keyword">val</span> audioManager: AudioManager = applicationContext.getSystemService(Context.AUDIO_SERVICE) <span class="keyword">as</span> AudioManager</span><br><span class="line">expandedVolDown.setOnClickListener &#123;</span><br><span class="line">    audioManager.adjustVolume(AudioManager.ADJUST_LOWER, AudioManager.FLAG_PLAY_SOUND)  <span class="comment">//音量--</span></span><br><span class="line">&#125;</span><br><span class="line">expandedVolUp.setOnClickListener &#123;</span><br><span class="line">    audioManager.adjustVolume(AudioManager.ADJUST_RAISE, AudioManager.FLAG_PLAY_SOUND)  <span class="comment">//音量++</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>ExpandedController在播放完畢之後一段時間會自動消失，這時如果用當作捷徑的浮動按鈕來Intent回來，會因為找不到東西而報錯，所以要Intent過來ExpandedControlsActivity以前，必須要檢查cast的資料還在不在</p><pre><code>Objects.requireNonNull(CastContext.getSharedInstance()).getSessionManager().getCurrentCastSession()!=null</code></pre>        <h6 id="tags-應用技術-Video-投屏-Chromecast-Remote-遠端"   >          <a href="#tags-應用技術-Video-投屏-Chromecast-Remote-遠端" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-Video-投屏-Chromecast-Remote-遠端" class="headerlink" title="tags: 應用技術 Video 投屏 Chromecast Remote 遠端"></a>tags: <code>應用技術</code> <code>Video</code> <code>投屏</code> <code>Chromecast</code> <code>Remote</code> <code>遠端</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可全屏播放VideoEnableWebView</title>
      <link href="/tutu1023/2021/04/29/%E5%8F%AF%E5%85%A8%E5%B1%8F%E6%92%AD%E6%94%BEVideoEnableWebView/"/>
      <url>/tutu1023/2021/04/29/%E5%8F%AF%E5%85%A8%E5%B1%8F%E6%92%AD%E6%94%BEVideoEnableWebView/</url>
      
        <content type="html"><![CDATA[<p>  Update：2020/04/15<br>  Code：Java、Kotlin<br>  By：Ada</p><p>參考來源：<span class="exturl"><a class="exturl__link"   href="https://github.com/cprcrack/VideoEnabledWebView" >https://github.com/cprcrack/VideoEnabledWebView</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>Android Studio內建的WebView將網頁內的full screen功能擋掉了，因此另寫一個可成功全屏播放的WebView來取代之。</p><hr>        <h3 id="1-創建一個VideoEnabledWebChromeClient"   >          <a href="#1-創建一個VideoEnabledWebChromeClient" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-創建一個VideoEnabledWebChromeClient" class="headerlink" title="1.創建一個VideoEnabledWebChromeClient"></a>1.創建一個VideoEnabledWebChromeClient</h3>      <figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoEnabledWebChromeClient</span> <span class="title">extends</span> <span class="title">WebChromeClient</span> <span class="title">implements</span> <span class="title">MediaPlayer</span>.<span class="title">OnPreparedListener</span>, <span class="type">MediaPlayer.OnCompletionListener</span>, <span class="type">MediaPlayer.OnErrorListener</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ToggledFullscreenCallback</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> void toggledFullscreen(boolean fullscreen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> View activityNonVideoView;</span><br><span class="line">    <span class="keyword">private</span> ViewGroup activityVideoView;</span><br><span class="line">    <span class="keyword">private</span> View loadingView;</span><br><span class="line">    <span class="keyword">private</span> VideoEnableWebView webView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> boolean isVideoFullscreen; <span class="comment">// Indicates if the video is being displayed using a custom view (typically full-screen)</span></span><br><span class="line">    <span class="keyword">private</span> FrameLayout videoViewContainer;</span><br><span class="line">    <span class="keyword">private</span> CustomViewCallback videoViewCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ToggledFullscreenCallback toggledFullscreenCallback;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Never use this constructor alone.</span></span><br><span class="line"><span class="comment">     * This constructor allows this class to be defined as an inline inner class in which the user can override methods</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> VideoEnabledWebChromeClient()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Builds a video enabled WebChromeClient.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activityNonVideoView A View in the activity&#x27;s layout that contains every other view that should be hidden when the video goes full-screen.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activityVideoView A ViewGroup in the activity&#x27;s layout that will display the video. Typically you would like this to fill the whole layout.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> VideoEnabledWebChromeClient(View activityNonVideoView, ViewGroup activityVideoView)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.activityNonVideoView = activityNonVideoView;</span><br><span class="line">        <span class="keyword">this</span>.activityVideoView = activityVideoView;</span><br><span class="line">        <span class="keyword">this</span>.loadingView = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.webView = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.isVideoFullscreen = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Builds a video enabled WebChromeClient.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activityNonVideoView A View in the activity&#x27;s layout that contains every other view that should be hidden when the video goes full-screen.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activityVideoView A ViewGroup in the activity&#x27;s layout that will display the video. Typically you would like this to fill the whole layout.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadingView A View to be shown while the video is loading (typically only used in API level &lt;11). Must be already inflated and not attached to a parent view.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> VideoEnabledWebChromeClient(View activityNonVideoView, ViewGroup activityVideoView, View loadingView)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.activityNonVideoView = activityNonVideoView;</span><br><span class="line">        <span class="keyword">this</span>.activityVideoView = activityVideoView;</span><br><span class="line">        <span class="keyword">this</span>.loadingView = loadingView;</span><br><span class="line">        <span class="keyword">this</span>.webView = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.isVideoFullscreen = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Builds a video enabled WebChromeClient.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activityNonVideoView A View in the activity&#x27;s layout that contains every other view that should be hidden when the video goes full-screen.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activityVideoView A ViewGroup in the activity&#x27;s layout that will display the video. Typically you would like this to fill the whole layout.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadingView A View to be shown while the video is loading (typically only used in API level &lt;11). Must be already inflated and not attached to a parent view.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webView The owner VideoEnabledWebView. Passing it will enable the VideoEnabledWebChromeClient to detect the HTML5 video ended event and exit full-screen.</span></span><br><span class="line"><span class="comment">     * Note: The web page must only contain one video tag in order for the HTML5 video ended event to work. This could be improved if needed (see Javascript code).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> VideoEnabledWebChromeClient(View activityNonVideoView, ViewGroup activityVideoView, View loadingView, VideoEnableWebView webView)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.activityNonVideoView = activityNonVideoView;</span><br><span class="line">        <span class="keyword">this</span>.activityVideoView = activityVideoView;</span><br><span class="line">        <span class="keyword">this</span>.loadingView = loadingView;</span><br><span class="line">        <span class="keyword">this</span>.webView = webView;</span><br><span class="line">        <span class="keyword">this</span>.isVideoFullscreen = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates if the video is being displayed using a custom view (typically full-screen)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true it the video is being displayed using a custom view (typically full-screen)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> boolean isVideoFullscreen()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> isVideoFullscreen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set a callback that will be fired when the video starts or finishes displaying using a custom view (typically full-screen)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback A VideoEnabledWebChromeClient.ToggledFullscreenCallback callback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void setOnToggledFullscreen(ToggledFullscreenCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.toggledFullscreenCallback = callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onShowCustomView(View view, CustomViewCallback callback)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (view instanceof FrameLayout)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// A video wants to be shown</span></span><br><span class="line">            FrameLayout frameLayout = (FrameLayout) view;</span><br><span class="line">            View focusedChild = frameLayout.getFocusedChild();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Save video related variables</span></span><br><span class="line">            <span class="keyword">this</span>.isVideoFullscreen = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">this</span>.videoViewContainer = frameLayout;</span><br><span class="line">            <span class="keyword">this</span>.videoViewCallback = callback;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Hide the non-video view, add the video view, and show it</span></span><br><span class="line">            activityNonVideoView.setVisibility(View.INVISIBLE);</span><br><span class="line">            activityVideoView.addView(videoViewContainer, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));</span><br><span class="line">            activityVideoView.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (focusedChild instanceof android.widget.VideoView)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// android.widget.VideoView (typically API level &lt;11)</span></span><br><span class="line">                android.widget.VideoView videoView = (android.widget.VideoView) focusedChild;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Handle all the required events</span></span><br><span class="line">                videoView.setOnPreparedListener(<span class="keyword">this</span>);</span><br><span class="line">                videoView.setOnCompletionListener(<span class="keyword">this</span>);</span><br><span class="line">                videoView.setOnErrorListener(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Other classes, including:</span></span><br><span class="line">                <span class="comment">// - android.webkit.HTML5VideoFullScreen$VideoSurfaceView, which inherits from android.view.SurfaceView (typically API level 11-18)</span></span><br><span class="line">                <span class="comment">// - android.webkit.HTML5VideoFullScreen$VideoTextureView, which inherits from android.view.TextureView (typically API level 11-18)</span></span><br><span class="line">                <span class="comment">// - com.android.org.chromium.content.browser.ContentVideoView$VideoSurfaceView, which inherits from android.view.SurfaceView (typically API level 19+)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Handle HTML5 video ended event only if the class is a SurfaceView</span></span><br><span class="line">                <span class="comment">// Test case: TextureView of Sony Xperia T API level 16 doesn&#x27;t work fullscreen when loading the javascript below</span></span><br><span class="line">                <span class="keyword">if</span> (webView != <span class="literal">null</span> &amp;&amp; webView.getSettings().getJavaScriptEnabled() &amp;&amp; focusedChild instanceof SurfaceView)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Run javascript code that detects the video end and notifies the Javascript interface</span></span><br><span class="line">                    String js = <span class="string">&quot;javascript:&quot;</span>;</span><br><span class="line">                    js += <span class="string">&quot;var _ytrp_html5_video_last;&quot;</span>;</span><br><span class="line">                    js += <span class="string">&quot;var _ytrp_html5_video = document.getElementsByTagName(&#x27;video&#x27;)[0];&quot;</span>;</span><br><span class="line">                    js += <span class="string">&quot;if (_ytrp_html5_video != undefined &amp;&amp; _ytrp_html5_video != _ytrp_html5_video_last) &#123;&quot;</span>;</span><br><span class="line">                    &#123;</span><br><span class="line">                        js += <span class="string">&quot;_ytrp_html5_video_last = _ytrp_html5_video;&quot;</span>;</span><br><span class="line">                        js += <span class="string">&quot;function _ytrp_html5_video_ended() &#123;&quot;</span>;</span><br><span class="line">                        &#123;</span><br><span class="line">                            js += <span class="string">&quot;_VideoEnabledWebView.notifyVideoEnd();&quot;</span>; <span class="comment">// Must match Javascript interface name and method of VideoEnableWebView</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        js += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">                        js += <span class="string">&quot;_ytrp_html5_video.addEventListener(&#x27;ended&#x27;, _ytrp_html5_video_ended);&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    js += <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">                    webView.loadUrl(js);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Notify full-screen change</span></span><br><span class="line">            <span class="keyword">if</span> (toggledFullscreenCallback != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                toggledFullscreenCallback.toggledFullscreen(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;deprecation&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void onShowCustomView(View view, int requestedOrientation, CustomViewCallback callback) <span class="comment">// Available in API level 14+, deprecated in API level 18+</span></span><br><span class="line">    &#123;</span><br><span class="line">        onShowCustomView(view, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onHideCustomView()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// This method should be manually called on video end in all cases because it&#x27;s not always called automatically.</span></span><br><span class="line">        <span class="comment">// This method must be manually called on back key press (from this class&#x27; onBackPressed() method).</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isVideoFullscreen)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Hide the video view, remove it, and show the non-video view</span></span><br><span class="line">            activityVideoView.setVisibility(View.INVISIBLE);</span><br><span class="line">            activityVideoView.removeView(videoViewContainer);</span><br><span class="line">            activityNonVideoView.setVisibility(View.VISIBLE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Call back (only in API level &lt;19, because in API level 19+ with chromium webview it crashes)</span></span><br><span class="line">            <span class="keyword">if</span> (videoViewCallback != <span class="literal">null</span> &amp;&amp; !videoViewCallback.getClass().getName().contains(<span class="string">&quot;.chromium.&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                videoViewCallback.onCustomViewHidden();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset video related variables</span></span><br><span class="line">            isVideoFullscreen = <span class="literal">false</span>;</span><br><span class="line">            videoViewContainer = <span class="literal">null</span>;</span><br><span class="line">            videoViewCallback = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Notify full-screen change</span></span><br><span class="line">            <span class="keyword">if</span> (toggledFullscreenCallback != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                toggledFullscreenCallback.toggledFullscreen(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View getVideoLoadingProgressView() <span class="comment">// Video will start loading</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (loadingView != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            loadingView.setVisibility(View.VISIBLE);</span><br><span class="line">            <span class="keyword">return</span> loadingView;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getVideoLoadingProgressView();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onPrepared(MediaPlayer mp) <span class="comment">// Video will start playing, only called in the case of android.widget.VideoView (typically API level &lt;11)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (loadingView != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            loadingView.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void onCompletion(MediaPlayer mp) <span class="comment">// Video finished playing, only called in the case of android.widget.VideoView (typically API level &lt;11)</span></span><br><span class="line">    &#123;</span><br><span class="line">        onHideCustomView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> boolean onError(MediaPlayer mp, int what, int extra) <span class="comment">// Error while playing video, only called in the case of android.widget.VideoView (typically API level &lt;11)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// By returning false, onCompletion() will be called</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies the class that the back key has been pressed by the user.</span></span><br><span class="line"><span class="comment">     * This must be called from the Activity&#x27;s onBackPressed(), and if it returns false, the activity itself should handle it. Otherwise don&#x27;t do anything.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Returns true if the event was handled, and false if was not (video view is not visible)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> boolean onBackPressed()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isVideoFullscreen)</span><br><span class="line">        &#123;</span><br><span class="line">            onHideCustomView();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">### <span class="number">2.</span>創建VideoEnableWebView</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoEnableWebView</span> <span class="title">extends</span> <span class="title">WebView</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavascriptInterface</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@android</span>.webkit.JavascriptInterface <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">        <span class="keyword">public</span> void notifyVideoEnd() <span class="comment">// Must match Javascript interface method of VideoEnabledWebChromeClient</span></span><br><span class="line">        &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;___&quot;</span>, <span class="string">&quot;GOT IT&quot;</span>);</span><br><span class="line">            <span class="comment">// This code is not executed in the UI thread, so we must force that to happen</span></span><br><span class="line">            new Handler(Looper.getMainLooper()).post(new Runnable()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> void run()</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (videoEnabledWebChromeClient != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        videoEnabledWebChromeClient.onHideCustomView();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> VideoEnabledWebChromeClient videoEnabledWebChromeClient;</span><br><span class="line">    <span class="keyword">private</span> boolean addedJavascriptInterface;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> VideoEnableWebView(Context context)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        addedJavascriptInterface = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> VideoEnableWebView(Context context, AttributeSet attrs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        addedJavascriptInterface = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> VideoEnableWebView(Context context, AttributeSet attrs, int defStyle)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        addedJavascriptInterface = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates if the video is being displayed using a custom view (typically full-screen)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true it the video is being displayed using a custom view (typically full-screen)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(<span class="meta-string">&quot;unused&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> boolean isVideoFullscreen()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> videoEnabledWebChromeClient != <span class="literal">null</span> &amp;&amp; videoEnabledWebChromeClient.isVideoFullscreen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Pass only a VideoEnabledWebChromeClient instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="meta">@SuppressLint(<span class="meta-string">&quot;SetJavaScriptEnabled&quot;</span>)</span></span><br><span class="line">    <span class="keyword">public</span> void setWebChromeClient(WebChromeClient client)</span><br><span class="line">    &#123;</span><br><span class="line">        getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (client instanceof VideoEnabledWebChromeClient)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.videoEnabledWebChromeClient = (VideoEnabledWebChromeClient) client;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.setWebChromeClient(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void loadData(String <span class="keyword">data</span>, String mimeType, String encoding)</span><br><span class="line">    &#123;</span><br><span class="line">        addJavascriptInterface();</span><br><span class="line">        <span class="keyword">super</span>.loadData(<span class="keyword">data</span>, mimeType, encoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void loadDataWithBaseURL(String baseUrl, String <span class="keyword">data</span>, String mimeType, String encoding, String historyUrl)</span><br><span class="line">    &#123;</span><br><span class="line">        addJavascriptInterface();</span><br><span class="line">        <span class="keyword">super</span>.loadDataWithBaseURL(baseUrl, <span class="keyword">data</span>, mimeType, encoding, historyUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void loadUrl(String url)</span><br><span class="line">    &#123;</span><br><span class="line">        addJavascriptInterface();</span><br><span class="line">        <span class="keyword">super</span>.loadUrl(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> void loadUrl(String url, Map&lt;String, String&gt; additionalHttpHeaders)</span><br><span class="line">    &#123;</span><br><span class="line">        addJavascriptInterface();</span><br><span class="line">        <span class="keyword">super</span>.loadUrl(url, additionalHttpHeaders);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void addJavascriptInterface()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!addedJavascriptInterface)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Add javascript interface to be called when the video ends (must be done before page load)</span></span><br><span class="line">            <span class="comment">//noinspection all</span></span><br><span class="line">            addJavascriptInterface(new JavascriptInterface(), <span class="string">&quot;_VideoEnabledWebView&quot;</span>); <span class="comment">// Must match Javascript interface name of VideoEnabledWebChromeClient</span></span><br><span class="line"></span><br><span class="line">            addedJavascriptInterface = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="3-將VideoEnableWebView套用到layout中"   >          <a href="#3-將VideoEnableWebView套用到layout中" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-將VideoEnableWebView套用到layout中" class="headerlink" title="3.將VideoEnableWebView套用到layout中"></a>3.將VideoEnableWebView套用到layout中</h3>      <p>將下方程式碼取代&lt;WebView/&gt;</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;RelativeLayout</span><br><span class="line"></span><br><span class="line">    android:id=<span class="string">&quot;@+id/webviewLayout&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- View that will be hidden <span class="keyword">when</span> video goes fullscreen --&gt;</span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">            android:id=<span class="string">&quot;@+id/nonVideoLayout&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.android.a58btv.Tool.VideoEnableWebView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/videoEnableWebview&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:focusable=<span class="string">&quot;true&quot;</span> android:focusableInTouchMode=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- View <span class="keyword">where</span> the video will be shown <span class="keyword">when</span> video goes fullscreen --&gt;</span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">            android:id=<span class="string">&quot;@+id/videoLayout&quot;</span></span><br><span class="line">            android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">            android:layout_height=<span class="string">&quot;match_parent&quot;</span> &gt;</span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>簡單來說就是將影片獨立出來，用videoLayout來承接，其他部分則是使用nonVideoLayout裡的VideoEnableWebView顯示。</p>        <h3 id="4-實際操作"   >          <a href="#4-實際操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-實際操作" class="headerlink" title="4.實際操作"></a>4.實際操作</h3>      <p>到Activity承接View，並建置一個webChromeClient，然後複寫onToggledFullscreen方法</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> videoEnableWebview = findViewById&lt;VideoEnableWebView&gt;(R.id.videoEnableWebview)</span><br><span class="line"><span class="keyword">val</span> nonVideoLayout = findViewById&lt;RelativeLayout&gt;(R.id.nonVideoLayout) <span class="comment">// Your own view, read class comments</span></span><br><span class="line"><span class="keyword">val</span> videoLayout = findViewById&lt;ViewGroup&gt;(R.id.videoLayout) <span class="comment">// Your own view, read class comments</span></span><br><span class="line"><span class="keyword">val</span> loadingView = layoutInflater.inflate(R.layout.view_loading_video, <span class="literal">null</span>) <span class="comment">// Your own view, read class comments</span></span><br><span class="line"><span class="keyword">val</span> webChromeClient = <span class="keyword">object</span> :VideoEnabledWebChromeClient(nonVideoLayout, videoLayout, loadingView, backupWebview) <span class="comment">// See all available constructors...</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">webChromeClient.setOnToggledFullscreen &#123; fullscreen -&gt;</span><br><span class="line">    <span class="keyword">if</span> (fullscreen) &#123;</span><br><span class="line">        <span class="keyword">val</span> attrs = window.attributes</span><br><span class="line">        attrs.flags += WindowManager.LayoutParams.FLAG_FULLSCREEN</span><br><span class="line">        attrs.flags += WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON</span><br><span class="line">        window.attributes = attrs</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">14</span>) &#123;</span><br><span class="line">            <span class="comment">//noinspection all</span></span><br><span class="line">            window.decorView.systemUiVisibility = (SYSTEM_UI_FLAG_LAYOUT_STABLE+</span><br><span class="line">                SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION+</span><br><span class="line">                SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN+</span><br><span class="line">                SYSTEM_UI_FLAG_HIDE_NAVIGATION+</span><br><span class="line">                SYSTEM_UI_FLAG_FULLSCREEN+</span><br><span class="line">                SYSTEM_UI_FLAG_IMMERSIVE_STICKY)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> attrs = window.attributes</span><br><span class="line">        attrs.flags -= WindowManager.LayoutParams.FLAG_FULLSCREEN</span><br><span class="line">        attrs.flags -= WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON</span><br><span class="line">        window.attributes = attrs</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">14</span>) &#123;</span><br><span class="line">            <span class="comment">//noinspection all</span></span><br><span class="line">            window.decorView.systemUiVisibility = SYSTEM_UI_FLAG_VISIBLE</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">videoEnableWebview.webChromeClient = webChromeClient</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>複寫viedoEnableWebView的webViewClient方法</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">videoEnableWebview.webViewClient = <span class="keyword">object</span>: WebViewClient()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(view:<span class="type">WebView</span> , url:<span class="type">String</span> )</span></span>:<span class="built_in">Boolean</span> &#123;</span><br><span class="line">        view.loadUrl(url)  <span class="comment">//攔截request，才不會跳出App另開啟瀏覽器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageStarted</span><span class="params">(view: <span class="type">WebView</span>?, url: <span class="type">String</span>?, favicon: <span class="type">Bitmap</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onPageStarted(view, url, favicon)</span><br><span class="line">        loadingLayout.visibility=VISIBLE</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPageFinished</span><span class="params">(view: <span class="type">WebView</span>?, url: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onPageFinished(view, url)</span><br><span class="line">        loadingLayout.visibility=GONE</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>最後執行loadUrl動作</p><figure class="highlight kotlin"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">videoEnableWebview.loadUrl(yourUrl)</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h6 id="tags-應用技術-Video-WebView"   >          <a href="#tags-應用技術-Video-WebView" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-應用技術-Video-WebView" class="headerlink" title="tags: 應用技術 Video WebView"></a>tags: <code>應用技術</code> <code>Video</code> <code>WebView</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>硬加速HardwareAccelerated</title>
      <link href="/tutu1023/2021/04/29/%E7%A1%AC%E5%8A%A0%E9%80%9FHardwareAccelerated/"/>
      <url>/tutu1023/2021/04/29/%E7%A1%AC%E5%8A%A0%E9%80%9FHardwareAccelerated/</url>
      
        <content type="html"><![CDATA[<p>  Update：2020/01/07<br>  By：Ada</p>        <h5 id="瞭解硬加速的優缺點：【Android】-硬件加速-hardwareAccelerated-可能導致的問題"   >          <a href="#瞭解硬加速的優缺點：【Android】-硬件加速-hardwareAccelerated-可能導致的問題" class="heading-link"><i class="fas fa-link"></i></a><a href="#瞭解硬加速的優缺點：【Android】-硬件加速-hardwareAccelerated-可能導致的問題" class="headerlink" title="瞭解硬加速的優缺點：【Android】 硬件加速(hardwareAccelerated)可能導致的問題"></a>瞭解硬加速的優缺點：<span class="exturl"><a class="exturl__link"   href="http://stephenandroiddv.blogspot.com/2017/11/android-hardwareaccelerated.html" >【Android】 硬件加速(hardwareAccelerated)可能導致的問題</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></h5>      <p>系統預設為開啟，但若是手動設為false的話，會使app卡頓、cardView失效、元件的elevation陰影消失</p><p><code>AndroidManifest.xml</code></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;application</span><br><span class="line">    android:label=<span class="string">&quot;@string/app_name&quot;</span></span><br><span class="line">    android:icon=<span class="string">&quot;@mipmap/icon&quot;</span></span><br><span class="line">    android:theme=<span class="string">&quot;@style/AppTheme&quot;</span></span><br><span class="line">    android:hardwareAccelerated=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&lt;/application&gt;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>硬件的加速會佔用一定的RAM，但如果app只是標準的View和可拉伸，全局都打開硬件加速，是不會有任何問題的。</p><p>若是動畫很多的話，想要只針對某些範圍進行不會卡頓的硬加速，可以參考下面網址</p><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/janronehoo/article/details/7517284" >android学习——控制硬加速 hardwareAccelerated 在3.0才有的。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>結論就是沒事不要亂打開就不會有事QQ</p>        <h6 id="tags-問題說明-卡頓-hardwareAccelerated-硬件加速"   >          <a href="#tags-問題說明-卡頓-hardwareAccelerated-硬件加速" class="heading-link"><i class="fas fa-link"></i></a><a href="#tags-問題說明-卡頓-hardwareAccelerated-硬件加速" class="headerlink" title="tags: 問題說明 卡頓 hardwareAccelerated 硬件加速"></a>tags: <code>問題說明</code> <code>卡頓</code> <code>hardwareAccelerated</code> <code>硬件加速</code></h6>      ]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
